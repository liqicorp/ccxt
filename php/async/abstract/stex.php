<?php

namespace ccxt\async\abstract;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


abstract class stex extends \ccxt\async\Exchange {
    public function public_get_currencies($params = array()) {
        return $this->request('currencies', 'public', 'GET', $params);
    }
    public function public_get_currencies_currencyid($params = array()) {
        return $this->request('currencies/{currencyId}', 'public', 'GET', $params);
    }
    public function public_get_markets($params = array()) {
        return $this->request('markets', 'public', 'GET', $params);
    }
    public function public_get_pairs_groups($params = array()) {
        return $this->request('pairs-groups', 'public', 'GET', $params);
    }
    public function public_get_currency_pairs_list_code($params = array()) {
        return $this->request('currency_pairs/list/{code}', 'public', 'GET', $params);
    }
    public function public_get_currency_pairs_group_currencypairgroupid($params = array()) {
        return $this->request('currency_pairs/group/{currencyPairGroupId}', 'public', 'GET', $params);
    }
    public function public_get_currency_pairs_currencypairid($params = array()) {
        return $this->request('currency_pairs/{currencyPairId}', 'public', 'GET', $params);
    }
    public function public_get_ticker($params = array()) {
        return $this->request('ticker', 'public', 'GET', $params);
    }
    public function public_get_ticker_currencypairid($params = array()) {
        return $this->request('ticker/{currencyPairId}', 'public', 'GET', $params);
    }
    public function public_get_trades_currencypairid($params = array()) {
        return $this->request('trades/{currencyPairId}', 'public', 'GET', $params);
    }
    public function public_get_orderbook_currencypairid($params = array()) {
        return $this->request('orderbook/{currencyPairId}', 'public', 'GET', $params);
    }
    public function public_get_chart_currencypairid_candlestype($params = array()) {
        return $this->request('chart/{currencyPairId}/{candlesType}', 'public', 'GET', $params);
    }
    public function public_get_deposit_statuses($params = array()) {
        return $this->request('deposit-statuses', 'public', 'GET', $params);
    }
    public function public_get_deposit_statuses_statusid($params = array()) {
        return $this->request('deposit-statuses/{statusId}', 'public', 'GET', $params);
    }
    public function public_get_withdrawal_statuses($params = array()) {
        return $this->request('withdrawal-statuses', 'public', 'GET', $params);
    }
    public function public_get_withdrawal_statuses_statusid($params = array()) {
        return $this->request('withdrawal-statuses/{statusId}', 'public', 'GET', $params);
    }
    public function public_get_ping($params = array()) {
        return $this->request('ping', 'public', 'GET', $params);
    }
    public function public_get_mobile_versions($params = array()) {
        return $this->request('mobile-versions', 'public', 'GET', $params);
    }
    public function public_get_twitter($params = array()) {
        return $this->request('twitter', 'public', 'GET', $params);
    }
    public function trading_get_fees_currencypairid($params = array()) {
        return $this->request('fees/{currencyPairId}', 'trading', 'GET', $params);
    }
    public function trading_get_orders($params = array()) {
        return $this->request('orders', 'trading', 'GET', $params);
    }
    public function trading_get_orders_currencypairid($params = array()) {
        return $this->request('orders/{currencyPairId}', 'trading', 'GET', $params);
    }
    public function trading_get_order_orderid($params = array()) {
        return $this->request('order/{orderId}', 'trading', 'GET', $params);
    }
    public function trading_post_orders_currencypairid($params = array()) {
        return $this->request('orders/{currencyPairId}', 'trading', 'POST', $params);
    }
    public function trading_post_orders_bulk_currencypairid($params = array()) {
        return $this->request('orders/bulk/{currencyPairId}', 'trading', 'POST', $params);
    }
    public function trading_delete_orders($params = array()) {
        return $this->request('orders', 'trading', 'DELETE', $params);
    }
    public function trading_delete_orders_currencypairid($params = array()) {
        return $this->request('orders/{currencyPairId}', 'trading', 'DELETE', $params);
    }
    public function trading_delete_order_orderid($params = array()) {
        return $this->request('order/{orderId}', 'trading', 'DELETE', $params);
    }
    public function reports_get_currencies($params = array()) {
        return $this->request('currencies', 'reports', 'GET', $params);
    }
    public function reports_get_currency_pairs($params = array()) {
        return $this->request('currency_pairs', 'reports', 'GET', $params);
    }
    public function reports_get_orders($params = array()) {
        return $this->request('orders', 'reports', 'GET', $params);
    }
    public function reports_get_orders_orderid($params = array()) {
        return $this->request('orders/{orderId}', 'reports', 'GET', $params);
    }
    public function reports_get_trades_currencypairid($params = array()) {
        return $this->request('trades/{currencyPairId}', 'reports', 'GET', $params);
    }
    public function reports_get_background_listmode($params = array()) {
        return $this->request('background/{listMode}', 'reports', 'GET', $params);
    }
    public function reports_get_background_id($params = array()) {
        return $this->request('background/{id}', 'reports', 'GET', $params);
    }
    public function reports_get_background_download_id($params = array()) {
        return $this->request('background/download/{id}', 'reports', 'GET', $params);
    }
    public function reports_post_background_create($params = array()) {
        return $this->request('background/create', 'reports', 'POST', $params);
    }
    public function reports_delete_background_id($params = array()) {
        return $this->request('background/{id}', 'reports', 'DELETE', $params);
    }
    public function profile_get_info($params = array()) {
        return $this->request('info', 'profile', 'GET', $params);
    }
    public function profile_get_wallets($params = array()) {
        return $this->request('wallets', 'profile', 'GET', $params);
    }
    public function profile_get_wallets_walletid($params = array()) {
        return $this->request('wallets/{walletId}', 'profile', 'GET', $params);
    }
    public function profile_get_wallets_address_walletid($params = array()) {
        return $this->request('wallets/address/{walletId}', 'profile', 'GET', $params);
    }
    public function profile_get_deposits($params = array()) {
        return $this->request('deposits', 'profile', 'GET', $params);
    }
    public function profile_get_deposits_id($params = array()) {
        return $this->request('deposits/{id}', 'profile', 'GET', $params);
    }
    public function profile_get_rewards($params = array()) {
        return $this->request('rewards', 'profile', 'GET', $params);
    }
    public function profile_get_rewards_id($params = array()) {
        return $this->request('rewards/{id}', 'profile', 'GET', $params);
    }
    public function profile_get_addressbook($params = array()) {
        return $this->request('addressbook', 'profile', 'GET', $params);
    }
    public function profile_get_addressbook_itemid($params = array()) {
        return $this->request('addressbook/{itemId}', 'profile', 'GET', $params);
    }
    public function profile_get_withdrawals($params = array()) {
        return $this->request('withdrawals', 'profile', 'GET', $params);
    }
    public function profile_get_withdrawals_id($params = array()) {
        return $this->request('withdrawals/{id}', 'profile', 'GET', $params);
    }
    public function profile_get_notifications($params = array()) {
        return $this->request('notifications', 'profile', 'GET', $params);
    }
    public function profile_get_notifications_price($params = array()) {
        return $this->request('notifications/price', 'profile', 'GET', $params);
    }
    public function profile_get_favorite_currency_pairs($params = array()) {
        return $this->request('favorite/currency_pairs', 'profile', 'GET', $params);
    }
    public function profile_get_token_scopes($params = array()) {
        return $this->request('token-scopes', 'profile', 'GET', $params);
    }
    public function profile_post_wallets_burn_walletid($params = array()) {
        return $this->request('wallets/burn/{walletId}', 'profile', 'POST', $params);
    }
    public function profile_post_wallets_walletid_hold_amount($params = array()) {
        return $this->request('wallets/{walletId}/hold_amount', 'profile', 'POST', $params);
    }
    public function profile_post_wallets_currencyid($params = array()) {
        return $this->request('wallets/{currencyId}', 'profile', 'POST', $params);
    }
    public function profile_post_wallets_address_walletid($params = array()) {
        return $this->request('wallets/address/{walletId}', 'profile', 'POST', $params);
    }
    public function profile_post_addressbook_disable_item_itemid($params = array()) {
        return $this->request('addressbook/disable_item/{itemId}', 'profile', 'POST', $params);
    }
    public function profile_post_addressbook_enable_item_itemid($params = array()) {
        return $this->request('addressbook/enable_item/{itemId}', 'profile', 'POST', $params);
    }
    public function profile_post_addressbook_enable_strict_wd($params = array()) {
        return $this->request('addressbook/enable_strict_wd', 'profile', 'POST', $params);
    }
    public function profile_post_addressbook_disable_strict_wd($params = array()) {
        return $this->request('addressbook/disable_strict_wd', 'profile', 'POST', $params);
    }
    public function profile_post_withdraw($params = array()) {
        return $this->request('withdraw', 'profile', 'POST', $params);
    }
    public function profile_post_notifications_price($params = array()) {
        return $this->request('notifications/price', 'profile', 'POST', $params);
    }
    public function profile_post_referral_program($params = array()) {
        return $this->request('referral/program', 'profile', 'POST', $params);
    }
    public function profile_post_referral_insert_code($params = array()) {
        return $this->request('referral/insert/{code}', 'profile', 'POST', $params);
    }
    public function profile_post_referral_bonus_transfer_currencyid($params = array()) {
        return $this->request('referral/bonus_transfer/{currencyId}', 'profile', 'POST', $params);
    }
    public function profile_put_favorite_currency_pairs_set($params = array()) {
        return $this->request('favorite/currency_pairs/set', 'profile', 'PUT', $params);
    }
    public function profile_delete_addressbook_itemid($params = array()) {
        return $this->request('addressbook/{itemId}', 'profile', 'DELETE', $params);
    }
    public function profile_delete_withdraw_withdrawalid($params = array()) {
        return $this->request('withdraw/{withdrawalId}', 'profile', 'DELETE', $params);
    }
    public function profile_delete_notifications_price_pricealertid($params = array()) {
        return $this->request('notifications/price/{priceAlertId}', 'profile', 'DELETE', $params);
    }
    public function verification_get_countries($params = array()) {
        return $this->request('countries', 'verification', 'GET', $params);
    }
    public function verification_get_status($params = array()) {
        return $this->request('status', 'verification', 'GET', $params);
    }
    public function verification_get_fractal_url($params = array()) {
        return $this->request('fractal/url', 'verification', 'GET', $params);
    }
    public function verification_get_smart_id($params = array()) {
        return $this->request('smart-id', 'verification', 'GET', $params);
    }
    public function verification_get_stex($params = array()) {
        return $this->request('stex', 'verification', 'GET', $params);
    }
    public function verification_get_cryptonomica_code($params = array()) {
        return $this->request('cryptonomica/code', 'verification', 'GET', $params);
    }
    public function verification_post_smart_id($params = array()) {
        return $this->request('smart-id', 'verification', 'POST', $params);
    }
    public function verification_post_stex($params = array()) {
        return $this->request('stex', 'verification', 'POST', $params);
    }
    public function verification_post_cryptonomica($params = array()) {
        return $this->request('cryptonomica', 'verification', 'POST', $params);
    }
    public function settings_get_notifications_event($params = array()) {
        return $this->request('notifications/{event}', 'settings', 'GET', $params);
    }
    public function settings_get_notifications($params = array()) {
        return $this->request('notifications', 'settings', 'GET', $params);
    }
    public function settings_put_notifications($params = array()) {
        return $this->request('notifications', 'settings', 'PUT', $params);
    }
    public function settings_put_notifications_set($params = array()) {
        return $this->request('notifications/set', 'settings', 'PUT', $params);
    }
}