<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\abstract\liqi as Exchange;

class liqi extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'liqi',
            'name' => 'Liqi',
            'countries' => array( 'JP', 'MT' ), // Japan, Malta
            'rateLimit' => 50,
            'certified' => true,
            'pro' => true,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => true,
                'swap' => true,
                'future' => true,
                'option' => null,
                'addMargin' => true,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'cancelOrders' => false,
                'createDepositAddress' => false,
                'createOrder' => true,
                'createReduceOnlyOrder' => false,
                'deposit' => false,
                'fetchAccounts' => false,
                'fetchBalance' => true,
                'fetchBidsAsks' => false,
                'fetchBorrowRate' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchBorrowRates' => false,
                'fetchBorrowRatesPerSymbol' => false,
                'fetchCanceledOrders' => false,
                'fetchClosedOrder' => false,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDeposit' => false,
                'fetchDepositAddress' => false,
                'fetchDepositAddresses' => false,
                'fetchDepositAddressesByNetwork' => false,
                'fetchDeposits' => false,
                'fetchFundingFee' => false,
                'fetchFundingFees' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedPositions' => false,
                'fetchL3OrderBook' => false,
                'fetchLedger' => false,
                'fetchLeverage' => false,
                'fetchLeverageTiers' => false,
                'fetchMarketLeverageTiers' => 'emulated',
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyBuys' => false,
                'fetchMySells' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrder' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrderBooks' => false,
                'fetchOrders' => false,
                'fetchOrderTrades' => false,
                'fetchPosition' => false,
                'fetchPositions' => false,
                'fetchPositionsRisk' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchStatus' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchTradingLimits' => false,
                'fetchTransactions' => false,
                'fetchTransfers' => false,
                'fetchWithdrawal' => false,
                'fetchWithdrawals' => false,
                'fetchWithdrawalWhitelist' => false,
                'reduceMargin' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'setPositionMode' => false,
                'signIn' => true,
                'transfer' => false,
                'withdraw' => false,
            ),
            'timeframes' => array(
                '1m' => '1m',
                '3m' => '3m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '2h' => '2h',
                '4h' => '4h',
                '6h' => '6h',
                '8h' => '8h',
                '12h' => '12h',
                '1d' => '1d',
                '3d' => '3d',
                '1w' => '1w',
                '1M' => '1M',
            ),
            'urls' => array(
                'logo' => '',
                'api' => array(
                    'public' => 'https://api.liqi.com.br/exchange/v1',
                    'private' => 'https://api.liqi.com.br/exchange/v1',
                ),
                'www' => 'https://www.liqi.com.br',
                'doc' => array(
                    'https://liqi.readme.io/',
                ),
                'api_management' => 'https://www.liqi.com.br/gerenciamento-de-api',
            ),
            'depth' => 1,
            'api' => array(
                'public' => array(
                    'get' => array(
                        'fetchMarket' => 1,
                        'fetchMarkets' => 20,
                        'fetchCurrencies' => 20,
                        'fetchTickers' => 20,
                        'fetchTicker' => 1,
                        'fetchOrderBook' => 100,
                        'fetchOHLCV' => 1000,
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'fetchBalance' => 1,
                        'fetchOrders' => 100,
                        'fetchOpenOrders' => 100,
                        'fetchOrder' => 1,
                        'fetchTrades' => 500,
                    ),
                    'post' => array(
                        'createOrder' => 1,
                        'cancelOrder' => 1,
                        'cancelAllOrders' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'feeSide' => 'get',
                    'tierBased' => false,
                    'percentage' => true,
                    'taker' => $this->parse_number('0.0035'),
                    'maker' => $this->parse_number('0.0015'),
                ),
                'option' => array(),
            ),
            'commonCurrencies' => array(
                'BCC' => 'BCC', // kept for backward-compatibility https://github.com/ccxt/ccxt/issues/4848
                'YOYO' => 'YOYOW',
            ),
            // exchange-specific options
            'options' => array(
                'fetchCurrencies' => true,
                'defaultTimeInForce' => 'GTC',
                'defaultType' => 'spot',
                'hasAlreadyAuthenticatedSuccessfully' => false,
                'warnOnFetchOpenOrdersWithoutSymbol' => true,
                'throwMarginModeAlreadySet' => false,
                'fetchPositions' => 'positionRisk',
                'recvWindow' => 5 * 1000, // 5 sec, liqi default
                'timeDifference' => 0, // the difference between system clock and Liqi clock
                'adjustForTimeDifference' => false, // controls the adjustment logic upon instantiation
                'newOrderRespType' => array(
                    'market' => 'FULL', // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills
                    'limit' => 'FULL', // we change it from 'ACK' by default to 'FULL' (returns immediately if limit is not hit)
                ),
                'quoteOrderQty' => true, // whether market orders support amounts in quote currency
                'accountsByType' => array(
                    'main' => 'MAIN',
                    'spot' => 'MAIN',
                    'funding' => 'FUNDING',
                    'margin' => 'MARGIN',
                    'future' => 'UMFUTURE',
                    'delivery' => 'CMFUTURE',
                    'mining' => 'MINING',
                ),
                'typesByAccount' => array(
                    'MAIN' => 'spot',
                    'FUNDING' => 'funding',
                    'MARGIN' => 'margin',
                    'UMFUTURE' => 'future',
                    'CMFUTURE' => 'delivery',
                    'MINING' => 'mining',
                ),
                'networks' => array(
                    'ERC20' => 'ETH',
                    'TRC20' => 'TRX',
                    'BEP2' => 'BNB',
                    'BEP20' => 'BSC',
                    'OMNI' => 'OMNI',
                    'EOS' => 'EOS',
                    'SPL' => 'SOL',
                ),
                'reverseNetworks' => array(
                    'tronscan.org' => 'TRC20',
                    'etherscan.io' => 'ERC20',
                    'bscscan.com' => 'BSC',
                    'explorer.liqi.org' => 'BEP2',
                    'bithomp.com' => 'XRP',
                    'bloks.io' => 'EOS',
                    'stellar.expert' => 'XLM',
                    'blockchair.com/bitcoin' => 'BTC',
                    'blockchair.com/bitcoin-cash' => 'BCH',
                    'blockchair.com/ecash' => 'XEC',
                    'explorer.litecoin.net' => 'LTC',
                    'explorer.avax.network' => 'AVAX',
                    'solscan.io' => 'SOL',
                    'polkadot.subscan.io' => 'DOT',
                    'dashboard.internetcomputer.org' => 'ICP',
                    'explorer.chiliz.com' => 'CHZ',
                    'cardanoscan.io' => 'ADA',
                    'mainnet.theoan.com' => 'AION',
                    'algoexplorer.io' => 'ALGO',
                    'explorer.ambrosus.com' => 'AMB',
                    'viewblock.io/zilliqa' => 'ZIL',
                    'viewblock.io/arweave' => 'AR',
                    'explorer.ark.io' => 'ARK',
                    'atomscan.com' => 'ATOM',
                    'www.mintscan.io' => 'CTK',
                    'explorer.bitcoindiamond.org' => 'BCD',
                    'btgexplorer.com' => 'BTG',
                    'bts.ai' => 'BTS',
                    'explorer.celo.org' => 'CELO',
                    'explorer.nervos.org' => 'CKB',
                    'cerebro.cortexlabs.ai' => 'CTXC',
                    'chainz.cryptoid.info' => 'VIA',
                    'explorer.dcrdata.org' => 'DCR',
                    'digiexplorer.info' => 'DGB',
                    'dock.subscan.io' => 'DOCK',
                    'dogechain.info' => 'DOGE',
                    'explorer.elrond.com' => 'EGLD',
                    'blockscout.com' => 'ETC',
                    'explore-fetchhub.fetch.ai' => 'FET',
                    'filfox.info' => 'FIL',
                    'fio.bloks.io' => 'FIO',
                    'explorer.firo.org' => 'FIRO',
                    'neoscan.io' => 'NEO',
                    'ftmscan.com' => 'FTM',
                    'explorer.gochain.io' => 'GO',
                    'block.gxb.io' => 'GXS',
                    'hash-hash.info' => 'HBAR',
                    'www.hiveblockexplorer.com' => 'HIVE',
                    'explorer.helium.com' => 'HNT',
                    'tracker.icon.foundation' => 'ICX',
                    'www.iostabc.com' => 'IOST',
                    'explorer.iota.org' => 'IOTA',
                    'iotexscan.io' => 'IOTX',
                    'irishub.iobscan.io' => 'IRIS',
                    'kava.mintscan.io' => 'KAVA',
                    'scope.klaytn.com' => 'KLAY',
                    'kmdexplorer.io' => 'KMD',
                    'kusama.subscan.io' => 'KSM',
                    'explorer.lto.network' => 'LTO',
                    'polygonscan.com' => 'POLYGON',
                    'explorer.ont.io' => 'ONT',
                    'minaexplorer.com' => 'MINA',
                    'nanolooker.com' => 'NANO',
                    'explorer.nebulas.io' => 'NAS',
                    'explorer.nbs.plus' => 'NBS',
                    'explorer.nebl.io' => 'NEBL',
                    'nulscan.io' => 'NULS',
                    'nxscan.com' => 'NXS',
                    'explorer.harmony.one' => 'ONE',
                    'explorer.poa.network' => 'POA',
                    'qtum.info' => 'QTUM',
                    'explorer.rsk.co' => 'RSK',
                    'www.oasisscan.com' => 'ROSE',
                    'ravencoin.network' => 'RVN',
                    'sc.tokenview.com' => 'SC',
                    'secretnodes.com' => 'SCRT',
                    'explorer.skycoin.com' => 'SKY',
                    'steemscan.com' => 'STEEM',
                    'explorer.stacks.co' => 'STX',
                    'www.thetascan.io' => 'THETA',
                    'scan.tomochain.com' => 'TOMO',
                    'explore.vechain.org' => 'VET',
                    'explorer.vite.net' => 'VITE',
                    'www.wanscan.org' => 'WAN',
                    'wavesexplorer.com' => 'WAVES',
                    'wax.eosx.io' => 'WAXP',
                    'waltonchain.pro' => 'WTC',
                    'chain.nem.ninja' => 'XEM',
                    'verge-blockchain.info' => 'XVG',
                    'explorer.yoyow.org' => 'YOYOW',
                    'explorer.zcha.in' => 'ZEC',
                    'explorer.zensystem.io' => 'ZEN',
                ),
                'impliedNetworks' => array(
                    'ETH' => array( 'ERC20' => 'ETH' ),
                    'TRX' => array( 'TRC20' => 'TRX' ),
                ),
                'legalMoney' => array(
                    'MXN' => true,
                    'UGX' => true,
                    'SEK' => true,
                    'CHF' => true,
                    'VND' => true,
                    'AED' => true,
                    'DKK' => true,
                    'KZT' => true,
                    'HUF' => true,
                    'PEN' => true,
                    'PHP' => true,
                    'USD' => true,
                    'TRY' => true,
                    'EUR' => true,
                    'NGN' => true,
                    'PLN' => true,
                    'BRL' => true,
                    'ZAR' => true,
                    'KES' => true,
                    'ARS' => true,
                    'RUB' => true,
                    'AUD' => true,
                    'NOK' => true,
                    'CZK' => true,
                    'GBP' => true,
                    'UAH' => true,
                    'GHS' => true,
                    'HKD' => true,
                    'CAD' => true,
                    'INR' => true,
                    'JPY' => true,
                    'NZD' => true,
                ),
            ),
            // https://liqi-docs.github.io/apidocs/spot/en/#error-codes-2
            'exceptions' => array(
                'exact' => array(
                    'System is under maintenance.' => '\\ccxt\\OnMaintenance', // array("code":1,"msg":"System is under maintenance.")
                    'System abnormality' => '\\ccxt\\ExchangeError', // array("code":-1000,"msg":"System abnormality")
                    'You are not authorized to execute this request.' => '\\ccxt\\PermissionDenied', // array("msg":"You are not authorized to execute this request.")
                    'API key does not exist' => '\\ccxt\\AuthenticationError',
                    'Order would trigger immediately.' => '\\ccxt\\OrderImmediatelyFillable',
                    'Stop price would trigger immediately.' => '\\ccxt\\OrderImmediatelyFillable', // array("code":-2010,"msg":"Stop price would trigger immediately.")
                    'Order would immediately match and take.' => '\\ccxt\\OrderImmediatelyFillable', // array("code":-2010,"msg":"Order would immediately match and take.")
                    'Account has insufficient balance for requested action.' => '\\ccxt\\InsufficientFunds',
                    'Rest API trading is not enabled.' => '\\ccxt\\ExchangeNotAvailable',
                    "You don't have permission." => '\\ccxt\\PermissionDenied', // array("msg":"You don't have permission.","success":false)
                    'Market is closed.' => '\\ccxt\\ExchangeNotAvailable', // array("code":-1013,"msg":"Market is closed.")
                    'Too many requests. Please try again later.' => '\\ccxt\\DDoSProtection', // array("msg":"Too many requests. Please try again later.","success":false)
                    'This action disabled is on this account.' => '\\ccxt\\AccountSuspended', // array("code":-2010,"msg":"This action disabled is on this account.")
                    '-1000' => '\\ccxt\\ExchangeNotAvailable', // array("code":-1000,"msg":"An unknown error occured while processing the request.")
                    '-1001' => '\\ccxt\\ExchangeNotAvailable', // array("code":-1001,"msg":"'Internal error; unable to process your request. Please try again.'")
                    '-1002' => '\\ccxt\\AuthenticationError', // array("code":-1002,"msg":"'You are not authorized to execute this request.'")
                    '-1003' => '\\ccxt\\RateLimitExceeded', // array("code":-1003,"msg":"Too much request weight used, current limit is 1200 request weight per 1 MINUTE. Please use the websocket for live updates to avoid polling the API.")
                    '-1004' => '\\ccxt\\DDoSProtection', // array("code":-1004,"msg":"Server is busy, please wait and try again")
                    '-1005' => '\\ccxt\\PermissionDenied', // array("code":-1005,"msg":"No such IP has been white listed")
                    '-1006' => '\\ccxt\\BadResponse', // array("code":-1006,"msg":"An unexpected response was received from the message bus. Execution status unknown.")
                    '-1007' => '\\ccxt\\RequestTimeout', // array("code":-1007,"msg":"Timeout waiting for response from backend server. Send status unknown; execution status unknown.")
                    '-1010' => '\\ccxt\\BadResponse', // array("code":-1010,"msg":"ERROR_MSG_RECEIVED.")
                    '-1011' => '\\ccxt\\PermissionDenied', // array("code":-1011,"msg":"This IP cannot access this route.")
                    '-1013' => '\\ccxt\\InvalidOrder', // array("code":-1013,"msg":"createOrder -> 'invalid quantity'/'invalid price'/MIN_NOTIONAL")
                    '-1014' => '\\ccxt\\InvalidOrder', // array("code":-1014,"msg":"Unsupported order combination.")
                    '-1015' => '\\ccxt\\RateLimitExceeded', // array("code":-1015,"msg":"'Too many new orders; current limit is %s orders per %s.'")
                    '-1016' => '\\ccxt\\ExchangeNotAvailable', // array("code":-1016,"msg":"'This service is no longer available.',")
                    '-1020' => '\\ccxt\\BadRequest', // array("code":-1020,"msg":"'This operation is not supported.'")
                    '-1021' => '\\ccxt\\InvalidNonce', // array("code":-1021,"msg":"'your time is ahead of server'")
                    '-1022' => '\\ccxt\\AuthenticationError', // array("code":-1022,"msg":"Signature for this request is not valid.")
                    '-1023' => '\\ccxt\\BadRequest', // array("code":-1023,"msg":"Start time is greater than end time.")
                    '-1099' => '\\ccxt\\AuthenticationError', // array("code":-1099,"msg":"Not found, authenticated, or authorized")
                    '-1100' => '\\ccxt\\BadRequest', // array("code":-1100,"msg":"createOrder(symbol, 1, asdf) -> 'Illegal characters found in parameter 'price'")
                    '-1101' => '\\ccxt\\BadRequest', // array("code":-1101,"msg":"Too many parameters; expected %s and received %s.")
                    '-1102' => '\\ccxt\\BadRequest', // array("code":-1102,"msg":"Param %s or %s must be sent, but both were empty")
                    '-1103' => '\\ccxt\\BadRequest', // array("code":-1103,"msg":"An unknown parameter was sent.")
                    '-1104' => '\\ccxt\\BadRequest', // array("code":-1104,"msg":"Not all sent parameters were read, read 8 parameters but was sent 9")
                    '-1105' => '\\ccxt\\BadRequest', // array("code":-1105,"msg":"Parameter %s was empty.")
                    '-1106' => '\\ccxt\\BadRequest', // array("code":-1106,"msg":"Parameter %s sent when not required.")
                    '-1108' => '\\ccxt\\BadRequest', // array("code":-1108,"msg":"Invalid asset.")
                    '-1109' => '\\ccxt\\AuthenticationError', // array("code":-1109,"msg":"Invalid account.")
                    '-1110' => '\\ccxt\\BadRequest', // array("code":-1110,"msg":"Invalid symbolType.")
                    '-1111' => '\\ccxt\\BadRequest', // array("code":-1111,"msg":"Precision is over the maximum defined for this asset.")
                    '-1112' => '\\ccxt\\InvalidOrder', // array("code":-1112,"msg":"No orders on book for symbol.")
                    '-1113' => '\\ccxt\\BadRequest', // array("code":-1113,"msg":"Withdrawal amount must be negative.")
                    '-1114' => '\\ccxt\\BadRequest', // array("code":-1114,"msg":"TimeInForce parameter sent when not required.")
                    '-1115' => '\\ccxt\\BadRequest', // array("code":-1115,"msg":"Invalid timeInForce.")
                    '-1116' => '\\ccxt\\BadRequest', // array("code":-1116,"msg":"Invalid orderType.")
                    '-1117' => '\\ccxt\\BadRequest', // array("code":-1117,"msg":"Invalid side.")
                    '-1118' => '\\ccxt\\BadRequest', // array("code":-1118,"msg":"New client order ID was empty.")
                    '-1119' => '\\ccxt\\BadRequest', // array("code":-1119,"msg":"Original client order ID was empty.")
                    '-1120' => '\\ccxt\\BadRequest', // array("code":-1120,"msg":"Invalid interval.")
                    '-1121' => '\\ccxt\\BadSymbol', // array("code":-1121,"msg":"Invalid symbol.")
                    '-1125' => '\\ccxt\\AuthenticationError', // array("code":-1125,"msg":"This listenKey does not exist.")
                    '-1127' => '\\ccxt\\BadRequest', // array("code":-1127,"msg":"More than %s hours between startTime and endTime.")
                    '-1128' => '\\ccxt\\BadRequest', // array("code":-1128,"msg":"array("code":-1128,"msg":"Combination of optional parameters invalid.")")
                    '-1130' => '\\ccxt\\BadRequest', // array("code":-1130,"msg":"Data sent for paramter %s is not valid.")
                    '-1131' => '\\ccxt\\BadRequest', // array("code":-1131,"msg":"recvWindow must be less than 60000")
                    '-1136' => '\\ccxt\\BadRequest', // array("code":-1136,"msg":"Invalid newOrderRespType")
                    '-2008' => '\\ccxt\\AuthenticationError', // array("code":-2008,"msg":"Invalid Api-Key ID.")
                    '-2010' => '\\ccxt\\ExchangeError', // array("code":-2010,"msg":"generic error code for createOrder -> 'Account has insufficient balance for requested action.', array("code":-2010,"msg":"Rest API trading is not enabled."), etc...")
                    '-2011' => '\\ccxt\\OrderNotFound', // array("code":-2011,"msg":"cancelOrder(1, 'BTC/USDT') -> 'UNKNOWN_ORDER'")
                    '-2013' => '\\ccxt\\OrderNotFound', // array("code":-2013,"msg":"fetchOrder (1, 'BTC/USDT') -> 'Order does not exist'")
                    '-2014' => '\\ccxt\\AuthenticationError', // array("code":-2014,"msg":"API-key format invalid.")
                    '-2015' => '\\ccxt\\AuthenticationError', // array("code":-2015,"msg":"Invalid API-key, IP, or permissions for action.")
                    '-2016' => '\\ccxt\\BadRequest', // array("code":-2016,"msg":"No trading window could be found for the symbol. Try ticker/24hrs instead.")
                    '-2018' => '\\ccxt\\InsufficientFunds', // array("code":-2018,"msg":"Balance is insufficient")
                    '-2019' => '\\ccxt\\InsufficientFunds', // array("code":-2019,"msg":"Margin is insufficient.")
                    '-2020' => '\\ccxt\\OrderNotFillable', // array("code":-2020,"msg":"Unable to fill.")
                    '-2021' => '\\ccxt\\OrderImmediatelyFillable', // array("code":-2021,"msg":"Order would immediately trigger.")
                    '-2022' => '\\ccxt\\InvalidOrder', // array("code":-2022,"msg":"ReduceOnly Order is rejected.")
                    '-2023' => '\\ccxt\\InsufficientFunds', // array(is_array(liquidation mode now.") && array_key_exists("code":-2023,"msg":"User, liquidation mode now."))
                    '-2024' => '\\ccxt\\InsufficientFunds', // array("code":-2024,"msg":"Position is not sufficient.")
                    '-2025' => '\\ccxt\\InvalidOrder', // array("code":-2025,"msg":"Reach max open order limit.")
                    '-2026' => '\\ccxt\\InvalidOrder', // array("code":-2026,"msg":"This OrderType is not supported when reduceOnly.")
                    '-2027' => '\\ccxt\\InvalidOrder', // array("code":-2027,"msg":"Exceeded the maximum allowable position at current leverage.")
                    '-2028' => '\\ccxt\\InsufficientFunds', // array("code":-2028,"msg":"Leverage is smaller than permitted => insufficient margin balance")
                    '-3000' => '\\ccxt\\ExchangeError', // array("code":-3000,"msg":"Internal server error.")
                    '-3001' => '\\ccxt\\AuthenticationError', // array("code":-3001,"msg":"Please enable 2FA first.")
                    '-3002' => '\\ccxt\\BadSymbol', // array("code":-3002,"msg":"We don't have this asset.")
                    '-3003' => '\\ccxt\\BadRequest', // array("code":-3003,"msg":"Margin account does not exist.")
                    '-3004' => '\\ccxt\\ExchangeError', // array("code":-3004,"msg":"Trade not allowed.")
                    '-3005' => '\\ccxt\\InsufficientFunds', // array("code":-3005,"msg":"Transferring out not allowed. Transfer out amount exceeds max amount.")
                    '-3006' => '\\ccxt\\InsufficientFunds', // array("code":-3006,"msg":"Your borrow amount has exceed maximum borrow amount.")
                    '-3007' => '\\ccxt\\ExchangeError', // array("code":-3007,"msg":"You have pending transaction, please try again later..")
                    '-3008' => '\\ccxt\\InsufficientFunds', // array("code":-3008,"msg":"Borrow not allowed. Your borrow amount has exceed maximum borrow amount.")
                    '-3009' => '\\ccxt\\BadRequest', // array("code":-3009,"msg":"This asset are not allowed to transfer into margin account currently.")
                    '-3010' => '\\ccxt\\ExchangeError', // array("code":-3010,"msg":"Repay not allowed. Repay amount exceeds borrow amount.")
                    '-3011' => '\\ccxt\\BadRequest', // array("code":-3011,"msg":"Your input date is invalid.")
                    '-3012' => '\\ccxt\\ExchangeError', // array("code":-3012,"msg":"Borrow is banned for this asset.")
                    '-3013' => '\\ccxt\\BadRequest', // array("code":-3013,"msg":"Borrow amount less than minimum borrow amount.")
                    '-3014' => '\\ccxt\\AccountSuspended', // array("code":-3014,"msg":"Borrow is banned for this account.")
                    '-3015' => '\\ccxt\\ExchangeError', // array("code":-3015,"msg":"Repay amount exceeds borrow amount.")
                    '-3016' => '\\ccxt\\BadRequest', // array("code":-3016,"msg":"Repay amount less than minimum repay amount.")
                    '-3017' => '\\ccxt\\ExchangeError', // array("code":-3017,"msg":"This asset are not allowed to transfer into margin account currently.")
                    '-3018' => '\\ccxt\\AccountSuspended', // array(is_array(has been banned for this account.") && array_key_exists("code":-3018,"msg":"Transferring, has been banned for this account."))
                    '-3019' => '\\ccxt\\AccountSuspended', // array("code":-3019,"msg":"Transferring out has been banned for this account.")
                    '-3020' => '\\ccxt\\InsufficientFunds', // array("code":-3020,"msg":"Transfer out amount exceeds max amount.")
                    '-3021' => '\\ccxt\\BadRequest', // array("code":-3021,"msg":"Margin account are not allowed to trade this trading pair.")
                    '-3022' => '\\ccxt\\AccountSuspended', // array("code":-3022,"msg":"You account's trading is banned.")
                    '-3023' => '\\ccxt\\BadRequest', // array("code":-3023,"msg":"You can't transfer out/place order under current margin level.")
                    '-3024' => '\\ccxt\\ExchangeError', // array("code":-3024,"msg":"The unpaid debt is too small after this repayment.")
                    '-3025' => '\\ccxt\\BadRequest', // array("code":-3025,"msg":"Your input date is invalid.")
                    '-3026' => '\\ccxt\\BadRequest', // array("code":-3026,"msg":"Your input param is invalid.")
                    '-3027' => '\\ccxt\\BadSymbol', // array("code":-3027,"msg":"Not a valid margin asset.")
                    '-3028' => '\\ccxt\\BadSymbol', // array("code":-3028,"msg":"Not a valid margin pair.")
                    '-3029' => '\\ccxt\\ExchangeError', // array("code":-3029,"msg":"Transfer failed.")
                    '-3036' => '\\ccxt\\AccountSuspended', // array("code":-3036,"msg":"This account is not allowed to repay.")
                    '-3037' => '\\ccxt\\ExchangeError', // array("code":-3037,"msg":"PNL is clearing. Wait a second.")
                    '-3038' => '\\ccxt\\BadRequest', // array("code":-3038,"msg":"Listen key not found.")
                    '-3041' => '\\ccxt\\InsufficientFunds', // array("code":-3041,"msg":"Balance is not enough")
                    '-3042' => '\\ccxt\\BadRequest', // array("code":-3042,"msg":"PriceIndex not available for this margin pair.")
                    '-3043' => '\\ccxt\\BadRequest', // array(is_array(not allowed.") && array_key_exists("code":-3043,"msg":"Transferring, not allowed."))
                    '-3044' => '\\ccxt\\DDoSProtection', // array("code":-3044,"msg":"System busy.")
                    '-3045' => '\\ccxt\\ExchangeError', // array("code":-3045,"msg":"The system doesn't have enough asset now.")
                    '-3999' => '\\ccxt\\ExchangeError', // array("code":-3999,"msg":"This function is only available for invited users.")
                    '-4001' => '\\ccxt\\BadRequest', // array("code":-4001 ,"msg":"Invalid operation.")
                    '-4002' => '\\ccxt\\BadRequest', // array("code":-4002 ,"msg":"Invalid get.")
                    '-4003' => '\\ccxt\\BadRequest', // array("code":-4003 ,"msg":"Your input email is invalid.")
                    '-4004' => '\\ccxt\\AuthenticationError', // array("code":-4004,"msg":"You don't login or auth.")
                    '-4005' => '\\ccxt\\RateLimitExceeded', // array("code":-4005 ,"msg":"Too many new requests.")
                    '-4006' => '\\ccxt\\BadRequest', // array("code":-4006 ,"msg":"Support main account only.")
                    '-4007' => '\\ccxt\\BadRequest', // array("code":-4007 ,"msg":"Address validation is not passed.")
                    '-4008' => '\\ccxt\\BadRequest', // array("code":-4008 ,"msg":"Address tag validation is not passed.")
                    '-4010' => '\\ccxt\\BadRequest', // array("code":-4010 ,"msg":"White list mail has been confirmed.") // [TODO] possible bug => it should probably be "has not been confirmed"
                    '-4011' => '\\ccxt\\BadRequest', // array("code":-4011 ,"msg":"White list mail is invalid.")
                    '-4012' => '\\ccxt\\BadRequest', // array("code":-4012 ,"msg":"White list is not opened.")
                    '-4013' => '\\ccxt\\AuthenticationError', // array("code":-4013 ,"msg":"2FA is not opened.")
                    '-4014' => '\\ccxt\\PermissionDenied', // array("code":-4014 ,"msg":"Withdraw is not allowed within 2 min login.")
                    '-4015' => '\\ccxt\\ExchangeError', // array("code":-4015 ,"msg":"Withdraw is limited.")
                    '-4016' => '\\ccxt\\PermissionDenied', // array("code":-4016 ,"msg":"Within 24 hours after password modification, withdrawal is prohibited.")
                    '-4017' => '\\ccxt\\PermissionDenied', // array("code":-4017 ,"msg":"Within 24 hours after the release of 2FA, withdrawal is prohibited.")
                    '-4018' => '\\ccxt\\BadSymbol', // array("code":-4018,"msg":"We don't have this asset.")
                    '-4019' => '\\ccxt\\BadSymbol', // array("code":-4019,"msg":"Current asset is not open for withdrawal.")
                    '-4021' => '\\ccxt\\BadRequest', // array("code":-4021,"msg":"Asset withdrawal must be an %s multiple of %s.")
                    '-4022' => '\\ccxt\\BadRequest', // array("code":-4022,"msg":"Not less than the minimum pick-up quantity %s.")
                    '-4023' => '\\ccxt\\ExchangeError', // array("code":-4023,"msg":"Within 24 hours, the withdrawal exceeds the maximum amount.")
                    '-4024' => '\\ccxt\\InsufficientFunds', // array("code":-4024,"msg":"You don't have this asset.")
                    '-4025' => '\\ccxt\\InsufficientFunds', // array("code":-4025,"msg":"The number of hold asset is less than zero.")
                    '-4026' => '\\ccxt\\InsufficientFunds', // array("code":-4026,"msg":"You have insufficient balance.")
                    '-4027' => '\\ccxt\\ExchangeError', // array("code":-4027,"msg":"Failed to obtain tranId.")
                    '-4028' => '\\ccxt\\BadRequest', // array("code":-4028,"msg":"The amount of withdrawal must be greater than the Commission.")
                    '-4029' => '\\ccxt\\BadRequest', // array("code":-4029,"msg":"The withdrawal record does not exist.")
                    '-4030' => '\\ccxt\\ExchangeError', // array("code":-4030,"msg":"Confirmation of successful asset withdrawal. [TODO] possible bug in docs")
                    '-4031' => '\\ccxt\\ExchangeError', // array("code":-4031,"msg":"Cancellation failed.")
                    '-4032' => '\\ccxt\\ExchangeError', // array("code":-4032,"msg":"Withdraw verification exception.")
                    '-4033' => '\\ccxt\\BadRequest', // array("code":-4033,"msg":"Illegal address.")
                    '-4034' => '\\ccxt\\ExchangeError', // array("code":-4034,"msg":"The address is suspected of fake.")
                    '-4035' => '\\ccxt\\PermissionDenied', // array("code":-4035,"msg":"This address is not on the whitelist. Please join and try again.")
                    '-4036' => '\\ccxt\\BadRequest', // array("code":-4036,"msg":"The new address needs to be withdrawn in {0} hours.")
                    '-4037' => '\\ccxt\\ExchangeError', // array("code":-4037,"msg":"Re-sending Mail failed.")
                    '-4038' => '\\ccxt\\ExchangeError', // array("code":-4038,"msg":"Please try again in 5 minutes.")
                    '-4039' => '\\ccxt\\BadRequest', // array("code":-4039,"msg":"The user does not exist.")
                    '-4040' => '\\ccxt\\BadRequest', // array("code":-4040,"msg":"This address not charged.")
                    '-4041' => '\\ccxt\\ExchangeError', // array("code":-4041,"msg":"Please try again in one minute.")
                    '-4042' => '\\ccxt\\ExchangeError', // array("code":-4042,"msg":"This asset cannot get deposit address again.")
                    '-4043' => '\\ccxt\\BadRequest', // array("code":-4043,"msg":"More than 100 recharge addresses were used in 24 hours.")
                    '-4044' => '\\ccxt\\BadRequest', // array("code":-4044,"msg":"This is a blacklist country.")
                    '-4045' => '\\ccxt\\ExchangeError', // array("code":-4045,"msg":"Failure to acquire assets.")
                    '-4046' => '\\ccxt\\AuthenticationError', // array("code":-4046,"msg":"Agreement not confirmed.")
                    '-4047' => '\\ccxt\\BadRequest', // array("code":-4047,"msg":"Time interval must be within 0-90 days")
                    '-5001' => '\\ccxt\\BadRequest', // array("code":-5001,"msg":"Don't allow transfer to micro assets.")
                    '-5002' => '\\ccxt\\InsufficientFunds', // array("code":-5002,"msg":"You have insufficient balance.")
                    '-5003' => '\\ccxt\\InsufficientFunds', // array("code":-5003,"msg":"You don't have this asset.")
                    '-5004' => '\\ccxt\\BadRequest', // array("code":-5004,"msg":"The residual balances of %s have exceeded 0.001BTC, Please re-choose.")
                    '-5005' => '\\ccxt\\InsufficientFunds', // array("code":-5005,"msg":"The residual balances of %s is too low, Please re-choose.")
                    '-5006' => '\\ccxt\\BadRequest', // array("code":-5006,"msg":"Only transfer once in 24 hours.")
                    '-5007' => '\\ccxt\\BadRequest', // array("code":-5007,"msg":"Quantity must be greater than zero.")
                    '-5008' => '\\ccxt\\InsufficientFunds', // array("code":-5008,"msg":"Insufficient amount of returnable assets.")
                    '-5009' => '\\ccxt\\BadRequest', // array("code":-5009,"msg":"Product does not exist.")
                    '-5010' => '\\ccxt\\ExchangeError', // array("code":-5010,"msg":"Asset transfer fail.")
                    '-5011' => '\\ccxt\\BadRequest', // array("code":-5011,"msg":"future account not exists.")
                    '-5012' => '\\ccxt\\ExchangeError', // array("code":-5012,"msg":"Asset transfer is in pending.")
                    '-5013' => '\\ccxt\\InsufficientFunds', // array("code":-5013,"msg":"Asset transfer failed => insufficient balance"") // undocumented
                    '-5021' => '\\ccxt\\BadRequest', // array("code":-5021,"msg":"This parent sub have no relation")
                    '-6001' => '\\ccxt\\BadRequest', // array("code":-6001,"msg":"Daily product not exists.")
                    '-6003' => '\\ccxt\\BadRequest', // array("code":-6003,"msg":"Product not exist or you don't have permission")
                    '-6004' => '\\ccxt\\ExchangeError', // array("code":-6004,"msg":"Product not in purchase status")
                    '-6005' => '\\ccxt\\InvalidOrder', // array("code":-6005,"msg":"Smaller than min purchase limit")
                    '-6006' => '\\ccxt\\BadRequest', // array("code":-6006,"msg":"Redeem amount error")
                    '-6007' => '\\ccxt\\BadRequest', // array(is_array(redeem time") && array_key_exists("code":-6007,"msg":"Not, redeem time"))
                    '-6008' => '\\ccxt\\BadRequest', // array("code":-6008,"msg":"Product not in redeem status")
                    '-6009' => '\\ccxt\\RateLimitExceeded', // array("code":-6009,"msg":"Request frequency too high")
                    '-6011' => '\\ccxt\\BadRequest', // array("code":-6011,"msg":"Exceeding the maximum num allowed to purchase per user")
                    '-6012' => '\\ccxt\\InsufficientFunds', // array("code":-6012,"msg":"Balance not enough")
                    '-6013' => '\\ccxt\\ExchangeError', // array("code":-6013,"msg":"Purchasing failed")
                    '-6014' => '\\ccxt\\BadRequest', // array("code":-6014,"msg":"Exceed up-limit allowed to purchased")
                    '-6015' => '\\ccxt\\BadRequest', // array("code":-6015,"msg":"Empty request body")
                    '-6016' => '\\ccxt\\BadRequest', // array("code":-6016,"msg":"Parameter err")
                    '-6017' => '\\ccxt\\BadRequest', // array(is_array(whitelist") && array_key_exists("code":-6017,"msg":"Not, whitelist"))
                    '-6018' => '\\ccxt\\BadRequest', // array("code":-6018,"msg":"Asset not enough")
                    '-6019' => '\\ccxt\\AuthenticationError', // array("code":-6019,"msg":"Need confirm")
                    '-6020' => '\\ccxt\\BadRequest', // array("code":-6020,"msg":"Project not exists")
                    '-7001' => '\\ccxt\\BadRequest', // array("code":-7001,"msg":"Date range is not supported.")
                    '-7002' => '\\ccxt\\BadRequest', // array("code":-7002,"msg":"Data request type is not supported.")
                    '-10017' => '\\ccxt\\BadRequest', // array("code":-10017,"msg":"Repay amount should not be larger than liability.")
                    '-11008' => '\\ccxt\\InsufficientFunds', // array("code":-11008,"msg":"Exceeding the account's maximum borrowable limit.") // undocumented
                    '-12014' => '\\ccxt\\RateLimitExceeded', // array("code":-12014,"msg":"More than 1 request in 3 seconds")
                    '-13000' => '\\ccxt\\BadRequest', // array("code":-13000,"msg":"Redeption of the token is forbiden now")
                    '-13001' => '\\ccxt\\BadRequest', // array("code":-13001,"msg":"Exceeds individual 24h redemption limit of the token")
                    '-13002' => '\\ccxt\\BadRequest', // array("code":-13002,"msg":"Exceeds total 24h redemption limit of the token")
                    '-13003' => '\\ccxt\\BadRequest', // array("code":-13003,"msg":"Subscription of the token is forbiden now")
                    '-13004' => '\\ccxt\\BadRequest', // array("code":-13004,"msg":"Exceeds individual 24h subscription limit of the token")
                    '-13005' => '\\ccxt\\BadRequest', // array("code":-13005,"msg":"Exceeds total 24h subscription limit of the token")
                    '-13006' => '\\ccxt\\InvalidOrder', // array("code":-13006,"msg":"Subscription amount is too small")
                    '-13007' => '\\ccxt\\AuthenticationError', // array("code":-13007,"msg":"The Agreement is not signed")
                    '100001003' => '\\ccxt\\BadRequest', // array("code":100001003,"msg":"Verification failed") // undocumented
                ),
                'broad' => array(
                    'has no operation privilege' => '\\ccxt\\PermissionDenied',
                    'MAX_POSITION' => '\\ccxt\\InvalidOrder', // array("code":-2010,"msg":"Filter failure => MAX_POSITION")
                ),
            ),
        ));
    }

    public function cost_to_precision($symbol, $cost) {
        return $this->decimal_to_precision($cost, TRUNCATE, $this->markets[$symbol]['precision']['quote'], $this->precisionMode, $this->paddingMode);
    }

    public function currency_to_precision($currency, $fee) {
        // info is available in currencies only if the user has configured his api keys
        if ($this->safe_value($this->currencies[$currency], 'precision') !== null) {
            return $this->decimal_to_precision($fee, TRUNCATE, $this->currencies[$currency]['precision'], $this->precisionMode, $this->paddingMode);
        } else {
            return $this->number_to_string($fee);
        }
    }

    public function nonce() {
        return $this->milliseconds() - $this->options['timeDifference'];
    }

    public function fetch_time($params = array ()) {
        $defaultType = $this->safe_string_2($this->options, 'fetchTime', 'defaultType', 'spot');
        $type = $this->safe_string($params, 'type', $defaultType);
        $query = $this->omit($params, 'type');
        $method = 'publicGetTime';
        if ($type === 'future') {
            $method = 'fapiPublicGetTime';
        } elseif ($type === 'delivery') {
            $method = 'dapiPublicGetTime';
        }
        $response = $this->$method ($query);
        return $this->safe_integer($response, 'serverTime');
    }

    public function fetch_currencies($limit, $params = array ()) {
        $request = array(
            'limit' => $limit || 1000,
        );
        $method = 'publicGetFetchCurrencies';
        $response = $this->$method (array_merge($request, $params));
        return $response;
    }

    public function fetch_market($symbol, $params = array ()) {
        $request = array(
            'symbol' => $symbol,
        );
        $method = 'publicGetFetchMarket';
        $response = $this->$method (array_merge($request, $params));
        return $response;
    }

    public function fetch_markets($params = array ()) {
        $method = 'publicGetFetchMarkets';
        $response = $this->$method ();
        return $response;
    }

    public function fetch_order($id, $params = array ()) {
        if ($id === null) {
            throw new ArgumentsRequired(' fetchOrder() precisa do $id da ordem como parâmetro');
        }
        $request = array(
            'id' => $id,
        );
        $method = 'privateGetFetchOrder';
        $response = $this->$method (array_merge($request));
        return $response;
    }

    public function fetch_orders($symbol, $limit, $since = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired(' fetchOrders() precisa do $symbol como parâmetro');
        }
        $request = array(
            'symbol' => $symbol,
            'limit' => $limit || 50,
        );
        $method = 'privateGetFetchOrders';
        $response = $this->$method (array_merge($request, $params));
        return $response;
    }

    public function fetch_balance($params = array ()) {
        $method = 'privateGetFetchBalance';
        $response = $this->$method ();
        return $response;
    }

    public function fetch_order_book($symbol, $limit = null, $params = array ()) {
        $request = array(
            'symbol' => $symbol,
        );
        $method = 'publicGetFetchOrderBook';
        $response = $this->$method (array_merge($request, $params));
        return $response;
    }

    public function fetch_ticker($symbol, $params = array ()) {
        $request = array(
            'symbol' => $symbol,
        );
        $method = 'publicGetFetchTicker';
        $response = $this->$method (array_merge($request, $params));
        return $response;
    }

    public function fetch_tickers($limit, $params = array ()) {
        $request = array(
            'limit' => $limit || 1000,
        );
        $method = 'publicGetFetchTickers';
        $response = $this->$method (array_merge($request, $params));
        return $response;
    }

    public function fetch_ohlcv($symbol, $internal = '1m', $limit = 500, $params = array ()) {
        $request = array(
            'symbol' => $symbol,
            'interval' => $internal,
            'limit' => $limit,
        );
        $method = 'publicGetFetchOHLCV';
        $response = $this->$method (array_merge($request, $params));
        return $response;
    }

    public function fetch_trades($symbol, $limit = null, $params = array ()) {
        $request = array(
            'symbol' => $symbol,
            'limit' => $limit,
        );
        $method = 'privateGetFetchTrades';
        $response = $this->$method (array_merge($request, $params));
        return $response;
    }

    public function create_order($symbol, $type, $side, $amount = null, $price = null, $quoteAmount = null, $params = array ()) {
        $request = array(
            'symbol' => $symbol,
            'type' => $type,
            'side' => $side,
            'amount' => $amount,
            'price' => $price,
            'quoteAmount' => $quoteAmount,
        );
        $method = 'privatePostCreateOrder';
        $response = $this->$method (array_merge($request, $params));
        return $response;
    }

    public function fetch_open_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired(' fetchOpenOrders() precisa do $symbol como parâmetro');
        }
        $request = array(
            'symbol' => $symbol,
            'limit' => $limit || 50,
        );
        $method = 'privateGetFetchOpenOrders';
        $response = $this->$method (array_merge($request, $params));
        return $response;
    }

    public function fetch_closed_orders($symbol = null, $since = null, $limit = null, $params = array ()) {
        $orders = $this->fetch_orders($symbol, $since, $limit, $params);
        return $this->filter_by($orders, 'status', 'closed');
    }

    public function cancel_order($id, $params = array ()) {
        $request = array(
            'id' => $id,
        );
        $method = 'privatePostCancelOrder';
        $response = $this->$method (array_merge($request, $params));
        return $response;
    }

    public function cancel_all_orders($symbol = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelAllOrders() requires a $symbol argument');
        }
        // $this->load_markets();
        // $market = $this->market($symbol);
        $request = array(
            'symbol' => $symbol,
        );
        $method = 'privatePostCancelAllOrders';
        $response = $this->$method (array_merge($request, $params));
        return $response;
    }

    public function fetch_order_trades($id, $symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrderTrades() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $type = $this->safe_string($params, 'type', $market['type']);
        $params = $this->omit($params, 'type');
        if ($type !== 'spot') {
            throw new NotSupported($this->id . ' fetchOrderTrades() supports spot markets only');
        }
        $request = array(
            'orderId' => $id,
        );
        return $this->fetch_my_trades($symbol, $since, $limit, array_merge($request, $params));
    }

    public function sign_ecdsa($request, $secret) {
        $signature = ed25519.sign ($request, $secret);
        $signatureStr = $this->to_der($signature, 'hex');
        return $signatureStr;
    }

    public function to_der($signature, $enc) {
        $r = $signature->r.to_array();
        $s = $signature->s.to_array();
        // Pad values
        if ($r[0] & 0x80) {
            $r = array( 0 ).concat ($r);
        }
        // Pad values
        if ($s[0] & 0x80) {
            $s = array( 0 ).concat ($s);
        }
        $r = $this->rm_padding($r);
        $s = $this->rm_padding($s);
        while (!$s[0] && !($s[1] & 0x80)) {
            $s = mb_substr($s, 1);
        }
        $arr = array( 0x02 );
        $this->construct_length($arr, strlen($r));
        $arr = $arr->concat ($r);
        $arr[] = 0x02;
        $this->construct_length($arr, strlen($s));
        $backHalf = $arr->concat ($s);
        $res = array( 0x30 );
        $this->construct_length($res, strlen($backHalf));
        $res = $res->concat ($backHalf);
        return utils.encode ($res, $enc);
    }

    public function construct_length($arr, $len) {
        if ($len < 0x80) {
            $arr[] = $len;
            return;
        }
        $octets = 1 . (log ($len) / Math.LN2 > 3);
        $arr[] = $octets | 0x80;
        while (--$octets) {
            $arr[] = ($len > ($octets < 3)) & 0xff;
        }
        $arr[] = $len;
    }

    public function rm_padding($buf) {
        $i = 0;
        $len = strlen($buf) - 1;
        while (!$buf[$i] && !($buf[$i + 1] & 0x80) && $i < $len) {
            $i++;
        }
        if ($i === 0) {
            return $buf;
        }
        return mb_substr($buf, $i);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api'][$api] . '/' . $this->implode_params($path, $params);
        $headers = $headers || array();
        if ($api === 'private') {
            $this->check_required_credentials();
            $query = null;
            $recvWindow = $this->safe_integer($this->options, 'recvWindow', 5000);
            $nonce = $this->nonce();
            $extendedParams = array_merge(array(
                'timestamp' => $nonce,
                'recvWindow' => $recvWindow,
            ), $params);
            $query = $this->urlencode($extendedParams);
            $hash = $this->hash($query, 'sha256', 'hex');
            $signature = $this->sign_ecdsa($hash, $this->secret);
            $headers = array(
                'signature' => $signature,
                'X-MBX-APIKEY' => $this->apiKey,
            );
            if (($method === 'GET') || ($method === 'DELETE')) {
                $url .= '?' . $query;
            } else {
                $body = $query;
                $headers['Content-Type'] = 'application/x-www-form-urlencoded';
            }
        } else {
            if ($params) {
                $url .= '?' . $this->urlencode($params);
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if (($code === 418) || ($code === 429)) {
            throw new DDoSProtection($this->id . ' ' . (string) $code . ' ' . $reason . ' ' . $body);
        }
        // $error $response in a form => array( "code" => -1013, "msg" => "Invalid quantity." )
        // following block cointains legacy checks against $message patterns in "msg" property
        // will switch "code" checks eventually, when we know all of them
        if ($code >= 400) {
            if (mb_strpos($body, 'Price * QTY is zero or less') !== false) {
                throw new InvalidOrder($this->id . ' order cost = amount * price is zero or less ' . $body);
            }
            if (mb_strpos($body, 'LOT_SIZE') !== false) {
                throw new InvalidOrder($this->id . ' order amount should be evenly divisible by lot size ' . $body);
            }
            if (mb_strpos($body, 'PRICE_FILTER') !== false) {
                throw new InvalidOrder($this->id . ' order price is invalid, i.e. exceeds allowed price precision, exceeds min price or max price limits or is invalid value in general, use $this->price_to_precision(symbol, amount) ' . $body);
            }
        }
        if ($response === null) {
            return; // fallback to default $error handler
        }
        // check $success value for wapi endpoints
        // $response in format array('msg' => 'The coin does not exist.', 'success' => true/false)
        $success = $this->safe_value($response, 'success', true);
        if (!$success) {
            $message = $this->safe_string($response, 'msg');
            $parsedMessage = null;
            if ($message !== null) {
                try {
                    $parsedMessage = json_decode($message, $as_associative_array = true);
                } catch (Exception $e) {
                    // do nothing
                    $parsedMessage = null;
                }
                if ($parsedMessage !== null) {
                    $response = $parsedMessage;
                }
            }
        }
        $message = $this->safe_string($response, 'msg');
        if ($message !== null) {
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $this->id . ' ' . $message);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $this->id . ' ' . $message);
        }
        // checks against $error codes
        $error = $this->safe_string($response, 'code');
        if ($error !== null) {
            // https://github.com/ccxt/ccxt/issues/6501
            // https://github.com/ccxt/ccxt/issues/7742
            if (($error === '200') || Precise::string_equals($error, '0')) {
                return null;
            }
            // a workaround for array("code":-2015,"msg":"Invalid API-key, IP, or permissions for action.")
            // despite that their $message is very confusing, it is raised by Liqi
            // on a temporary ban, the API key is valid, but disabled for a while
            if (($error === '-2015') && $this->options['hasAlreadyAuthenticatedSuccessfully']) {
                throw new DDoSProtection($this->id . ' temporary banned => ' . $body);
            }
            $feedback = $this->id . ' ' . $body;
            if ($message === 'No need to change margin type.') {
                // not an $error
                // https://github.com/ccxt/ccxt/issues/11268
                // https://github.com/ccxt/ccxt/pull/11624
                // POST https://fapi.liqi.com.br/fapi/v1/marginType 400 Bad Request
                // liqiusdm array("code":-4046,"msg":"No need to change margin type.")
                throw new MarginModeAlreadySet($feedback);
            }
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $error, $feedback);
            throw new ExchangeError($feedback);
        }
        if (!$success) {
            throw new ExchangeError($this->id . ' ' . $body);
        }
    }

    public function request($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null, $config = array (), $context = array ()) {
        $response = $this->fetch2($path, $api, $method, $params, $headers, $body, $config, $context);
        // a workaround for array("code":-2015,"msg":"Invalid API-key, IP, or permissions for action.")
        if (($api === 'private') || ($api === 'wapi')) {
            $this->options['hasAlreadyAuthenticatedSuccessfully'] = true;
        }
        return $response;
    }
}
