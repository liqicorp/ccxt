<?php

namespace ccxt\abstract;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


abstract class binancecoinm extends \ccxt\binance {
    public function sapi_get_system_status($params = array()) {
        return $this->request('system/status', 'sapi', 'GET', $params);
    }
    public function sapi_get_accountsnapshot($params = array()) {
        return $this->request('accountSnapshot', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_asset($params = array()) {
        return $this->request('margin/asset', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_pair($params = array()) {
        return $this->request('margin/pair', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_allassets($params = array()) {
        return $this->request('margin/allAssets', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_allpairs($params = array()) {
        return $this->request('margin/allPairs', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_priceindex($params = array()) {
        return $this->request('margin/priceIndex', 'sapi', 'GET', $params);
    }
    public function sapi_get_asset_assetdividend($params = array()) {
        return $this->request('asset/assetDividend', 'sapi', 'GET', $params);
    }
    public function sapi_get_asset_dribblet($params = array()) {
        return $this->request('asset/dribblet', 'sapi', 'GET', $params);
    }
    public function sapi_get_asset_transfer($params = array()) {
        return $this->request('asset/transfer', 'sapi', 'GET', $params);
    }
    public function sapi_get_asset_assetdetail($params = array()) {
        return $this->request('asset/assetDetail', 'sapi', 'GET', $params);
    }
    public function sapi_get_asset_tradefee($params = array()) {
        return $this->request('asset/tradeFee', 'sapi', 'GET', $params);
    }
    public function sapi_get_asset_ledger_transfer_cloud_mining_querybypage($params = array()) {
        return $this->request('asset/ledger-transfer/cloud-mining/queryByPage', 'sapi', 'GET', $params);
    }
    public function sapi_get_asset_convert_transfer_querybypage($params = array()) {
        return $this->request('asset/convert-transfer/queryByPage', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_loan($params = array()) {
        return $this->request('margin/loan', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_repay($params = array()) {
        return $this->request('margin/repay', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_account($params = array()) {
        return $this->request('margin/account', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_transfer($params = array()) {
        return $this->request('margin/transfer', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_interesthistory($params = array()) {
        return $this->request('margin/interestHistory', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_forceliquidationrec($params = array()) {
        return $this->request('margin/forceLiquidationRec', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_order($params = array()) {
        return $this->request('margin/order', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_openorders($params = array()) {
        return $this->request('margin/openOrders', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_allorders($params = array()) {
        return $this->request('margin/allOrders', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_mytrades($params = array()) {
        return $this->request('margin/myTrades', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_maxborrowable($params = array()) {
        return $this->request('margin/maxBorrowable', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_maxtransferable($params = array()) {
        return $this->request('margin/maxTransferable', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_tradecoeff($params = array()) {
        return $this->request('margin/tradeCoeff', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_isolated_transfer($params = array()) {
        return $this->request('margin/isolated/transfer', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_isolated_account($params = array()) {
        return $this->request('margin/isolated/account', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_isolated_pair($params = array()) {
        return $this->request('margin/isolated/pair', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_isolated_allpairs($params = array()) {
        return $this->request('margin/isolated/allPairs', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_isolated_accountlimit($params = array()) {
        return $this->request('margin/isolated/accountLimit', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_interestratehistory($params = array()) {
        return $this->request('margin/interestRateHistory', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_orderlist($params = array()) {
        return $this->request('margin/orderList', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_allorderlist($params = array()) {
        return $this->request('margin/allOrderList', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_openorderlist($params = array()) {
        return $this->request('margin/openOrderList', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_crossmargindata($params = array()) {
        return $this->request('margin/crossMarginData', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_isolatedmargindata($params = array()) {
        return $this->request('margin/isolatedMarginData', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_isolatedmargintier($params = array()) {
        return $this->request('margin/isolatedMarginTier', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_ratelimit_order($params = array()) {
        return $this->request('margin/rateLimit/order', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_dribblet($params = array()) {
        return $this->request('margin/dribblet', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_crossmargincollateralratio($params = array()) {
        return $this->request('margin/crossMarginCollateralRatio', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_exchange_small_liability($params = array()) {
        return $this->request('margin/exchange-small-liability', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_exchange_small_liability_history($params = array()) {
        return $this->request('margin/exchange-small-liability-history', 'sapi', 'GET', $params);
    }
    public function sapi_get_margin_next_hourly_interest_rate($params = array()) {
        return $this->request('margin/next-hourly-interest-rate', 'sapi', 'GET', $params);
    }
    public function sapi_get_loan_income($params = array()) {
        return $this->request('loan/income', 'sapi', 'GET', $params);
    }
    public function sapi_get_loan_ongoing_orders($params = array()) {
        return $this->request('loan/ongoing/orders', 'sapi', 'GET', $params);
    }
    public function sapi_get_loan_ltv_adjustment_history($params = array()) {
        return $this->request('loan/ltv/adjustment/history', 'sapi', 'GET', $params);
    }
    public function sapi_get_loan_borrow_history($params = array()) {
        return $this->request('loan/borrow/history', 'sapi', 'GET', $params);
    }
    public function sapi_get_loan_repay_history($params = array()) {
        return $this->request('loan/repay/history', 'sapi', 'GET', $params);
    }
    public function sapi_get_loan_loanable_data($params = array()) {
        return $this->request('loan/loanable/data', 'sapi', 'GET', $params);
    }
    public function sapi_get_loan_collateral_data($params = array()) {
        return $this->request('loan/collateral/data', 'sapi', 'GET', $params);
    }
    public function sapi_get_loan_repay_collateral_rate($params = array()) {
        return $this->request('loan/repay/collateral/rate', 'sapi', 'GET', $params);
    }
    public function sapi_get_loan_vip_ongoing_orders($params = array()) {
        return $this->request('loan/vip/ongoing/orders', 'sapi', 'GET', $params);
    }
    public function sapi_get_loan_vip_repay_history($params = array()) {
        return $this->request('loan/vip/repay/history', 'sapi', 'GET', $params);
    }
    public function sapi_get_loan_vip_collateral_account($params = array()) {
        return $this->request('loan/vip/collateral/account', 'sapi', 'GET', $params);
    }
    public function sapi_get_fiat_orders($params = array()) {
        return $this->request('fiat/orders', 'sapi', 'GET', $params);
    }
    public function sapi_get_fiat_payments($params = array()) {
        return $this->request('fiat/payments', 'sapi', 'GET', $params);
    }
    public function sapi_get_futures_transfer($params = array()) {
        return $this->request('futures/transfer', 'sapi', 'GET', $params);
    }
    public function sapi_get_futures_loan_borrow_history($params = array()) {
        return $this->request('futures/loan/borrow/history', 'sapi', 'GET', $params);
    }
    public function sapi_get_futures_loan_repay_history($params = array()) {
        return $this->request('futures/loan/repay/history', 'sapi', 'GET', $params);
    }
    public function sapi_get_futures_loan_wallet($params = array()) {
        return $this->request('futures/loan/wallet', 'sapi', 'GET', $params);
    }
    public function sapi_get_futures_loan_adjustcollateral_history($params = array()) {
        return $this->request('futures/loan/adjustCollateral/history', 'sapi', 'GET', $params);
    }
    public function sapi_get_futures_loan_liquidationhistory($params = array()) {
        return $this->request('futures/loan/liquidationHistory', 'sapi', 'GET', $params);
    }
    public function sapi_get_rebate_taxquery($params = array()) {
        return $this->request('rebate/taxQuery', 'sapi', 'GET', $params);
    }
    public function sapi_get_capital_config_getall($params = array()) {
        return $this->request('capital/config/getall', 'sapi', 'GET', $params);
    }
    public function sapi_get_capital_deposit_address($params = array()) {
        return $this->request('capital/deposit/address', 'sapi', 'GET', $params);
    }
    public function sapi_get_capital_deposit_hisrec($params = array()) {
        return $this->request('capital/deposit/hisrec', 'sapi', 'GET', $params);
    }
    public function sapi_get_capital_deposit_subaddress($params = array()) {
        return $this->request('capital/deposit/subAddress', 'sapi', 'GET', $params);
    }
    public function sapi_get_capital_deposit_subhisrec($params = array()) {
        return $this->request('capital/deposit/subHisrec', 'sapi', 'GET', $params);
    }
    public function sapi_get_capital_withdraw_history($params = array()) {
        return $this->request('capital/withdraw/history', 'sapi', 'GET', $params);
    }
    public function sapi_get_capital_contract_convertible_coins($params = array()) {
        return $this->request('capital/contract/convertible-coins', 'sapi', 'GET', $params);
    }
    public function sapi_get_convert_tradeflow($params = array()) {
        return $this->request('convert/tradeFlow', 'sapi', 'GET', $params);
    }
    public function sapi_get_convert_exchangeinfo($params = array()) {
        return $this->request('convert/exchangeInfo', 'sapi', 'GET', $params);
    }
    public function sapi_get_convert_assetinfo($params = array()) {
        return $this->request('convert/assetInfo', 'sapi', 'GET', $params);
    }
    public function sapi_get_convert_orderstatus($params = array()) {
        return $this->request('convert/orderStatus', 'sapi', 'GET', $params);
    }
    public function sapi_get_account_status($params = array()) {
        return $this->request('account/status', 'sapi', 'GET', $params);
    }
    public function sapi_get_account_apitradingstatus($params = array()) {
        return $this->request('account/apiTradingStatus', 'sapi', 'GET', $params);
    }
    public function sapi_get_account_apirestrictions_iprestriction($params = array()) {
        return $this->request('account/apiRestrictions/ipRestriction', 'sapi', 'GET', $params);
    }
    public function sapi_get_bnbburn($params = array()) {
        return $this->request('bnbBurn', 'sapi', 'GET', $params);
    }
    public function sapi_get_sub_account_futures_account($params = array()) {
        return $this->request('sub-account/futures/account', 'sapi', 'GET', $params);
    }
    public function sapi_get_sub_account_futures_accountsummary($params = array()) {
        return $this->request('sub-account/futures/accountSummary', 'sapi', 'GET', $params);
    }
    public function sapi_get_sub_account_futures_positionrisk($params = array()) {
        return $this->request('sub-account/futures/positionRisk', 'sapi', 'GET', $params);
    }
    public function sapi_get_sub_account_futures_internaltransfer($params = array()) {
        return $this->request('sub-account/futures/internalTransfer', 'sapi', 'GET', $params);
    }
    public function sapi_get_sub_account_list($params = array()) {
        return $this->request('sub-account/list', 'sapi', 'GET', $params);
    }
    public function sapi_get_sub_account_margin_account($params = array()) {
        return $this->request('sub-account/margin/account', 'sapi', 'GET', $params);
    }
    public function sapi_get_sub_account_margin_accountsummary($params = array()) {
        return $this->request('sub-account/margin/accountSummary', 'sapi', 'GET', $params);
    }
    public function sapi_get_sub_account_spotsummary($params = array()) {
        return $this->request('sub-account/spotSummary', 'sapi', 'GET', $params);
    }
    public function sapi_get_sub_account_status($params = array()) {
        return $this->request('sub-account/status', 'sapi', 'GET', $params);
    }
    public function sapi_get_sub_account_sub_transfer_history($params = array()) {
        return $this->request('sub-account/sub/transfer/history', 'sapi', 'GET', $params);
    }
    public function sapi_get_sub_account_transfer_subuserhistory($params = array()) {
        return $this->request('sub-account/transfer/subUserHistory', 'sapi', 'GET', $params);
    }
    public function sapi_get_sub_account_universaltransfer($params = array()) {
        return $this->request('sub-account/universalTransfer', 'sapi', 'GET', $params);
    }
    public function sapi_get_sub_account_apirestrictions_iprestriction_thirdpartylist($params = array()) {
        return $this->request('sub-account/apiRestrictions/ipRestriction/thirdPartyList', 'sapi', 'GET', $params);
    }
    public function sapi_get_sub_account_transaction_tatistics($params = array()) {
        return $this->request('sub-account/transaction-tatistics', 'sapi', 'GET', $params);
    }
    public function sapi_get_managed_subaccount_asset($params = array()) {
        return $this->request('managed-subaccount/asset', 'sapi', 'GET', $params);
    }
    public function sapi_get_managed_subaccount_accountsnapshot($params = array()) {
        return $this->request('managed-subaccount/accountSnapshot', 'sapi', 'GET', $params);
    }
    public function sapi_get_managed_subaccount_querytranslogforinvestor($params = array()) {
        return $this->request('managed-subaccount/queryTransLogForInvestor', 'sapi', 'GET', $params);
    }
    public function sapi_get_managed_subaccount_querytranslogfortradeparent($params = array()) {
        return $this->request('managed-subaccount/queryTransLogForTradeParent', 'sapi', 'GET', $params);
    }
    public function sapi_get_managed_subaccount_fetch_future_asset($params = array()) {
        return $this->request('managed-subaccount/fetch-future-asset', 'sapi', 'GET', $params);
    }
    public function sapi_get_managed_subaccount_marginasset($params = array()) {
        return $this->request('managed-subaccount/marginAsset', 'sapi', 'GET', $params);
    }
    public function sapi_get_managed_subaccount_info($params = array()) {
        return $this->request('managed-subaccount/info', 'sapi', 'GET', $params);
    }
    public function sapi_get_lending_daily_product_list($params = array()) {
        return $this->request('lending/daily/product/list', 'sapi', 'GET', $params);
    }
    public function sapi_get_lending_daily_userleftquota($params = array()) {
        return $this->request('lending/daily/userLeftQuota', 'sapi', 'GET', $params);
    }
    public function sapi_get_lending_daily_userredemptionquota($params = array()) {
        return $this->request('lending/daily/userRedemptionQuota', 'sapi', 'GET', $params);
    }
    public function sapi_get_lending_daily_token_position($params = array()) {
        return $this->request('lending/daily/token/position', 'sapi', 'GET', $params);
    }
    public function sapi_get_lending_union_account($params = array()) {
        return $this->request('lending/union/account', 'sapi', 'GET', $params);
    }
    public function sapi_get_lending_union_purchaserecord($params = array()) {
        return $this->request('lending/union/purchaseRecord', 'sapi', 'GET', $params);
    }
    public function sapi_get_lending_union_redemptionrecord($params = array()) {
        return $this->request('lending/union/redemptionRecord', 'sapi', 'GET', $params);
    }
    public function sapi_get_lending_union_interesthistory($params = array()) {
        return $this->request('lending/union/interestHistory', 'sapi', 'GET', $params);
    }
    public function sapi_get_lending_project_list($params = array()) {
        return $this->request('lending/project/list', 'sapi', 'GET', $params);
    }
    public function sapi_get_lending_project_position_list($params = array()) {
        return $this->request('lending/project/position/list', 'sapi', 'GET', $params);
    }
    public function sapi_get_mining_pub_algolist($params = array()) {
        return $this->request('mining/pub/algoList', 'sapi', 'GET', $params);
    }
    public function sapi_get_mining_pub_coinlist($params = array()) {
        return $this->request('mining/pub/coinList', 'sapi', 'GET', $params);
    }
    public function sapi_get_mining_worker_detail($params = array()) {
        return $this->request('mining/worker/detail', 'sapi', 'GET', $params);
    }
    public function sapi_get_mining_worker_list($params = array()) {
        return $this->request('mining/worker/list', 'sapi', 'GET', $params);
    }
    public function sapi_get_mining_payment_list($params = array()) {
        return $this->request('mining/payment/list', 'sapi', 'GET', $params);
    }
    public function sapi_get_mining_statistics_user_status($params = array()) {
        return $this->request('mining/statistics/user/status', 'sapi', 'GET', $params);
    }
    public function sapi_get_mining_statistics_user_list($params = array()) {
        return $this->request('mining/statistics/user/list', 'sapi', 'GET', $params);
    }
    public function sapi_get_mining_payment_uid($params = array()) {
        return $this->request('mining/payment/uid', 'sapi', 'GET', $params);
    }
    public function sapi_get_bswap_pools($params = array()) {
        return $this->request('bswap/pools', 'sapi', 'GET', $params);
    }
    public function sapi_get_bswap_liquidity($params = array()) {
        return $this->request('bswap/liquidity', 'sapi', 'GET', $params);
    }
    public function sapi_get_bswap_liquidityops($params = array()) {
        return $this->request('bswap/liquidityOps', 'sapi', 'GET', $params);
    }
    public function sapi_get_bswap_quote($params = array()) {
        return $this->request('bswap/quote', 'sapi', 'GET', $params);
    }
    public function sapi_get_bswap_swap($params = array()) {
        return $this->request('bswap/swap', 'sapi', 'GET', $params);
    }
    public function sapi_get_bswap_poolconfigure($params = array()) {
        return $this->request('bswap/poolConfigure', 'sapi', 'GET', $params);
    }
    public function sapi_get_bswap_addliquiditypreview($params = array()) {
        return $this->request('bswap/addLiquidityPreview', 'sapi', 'GET', $params);
    }
    public function sapi_get_bswap_removeliquiditypreview($params = array()) {
        return $this->request('bswap/removeLiquidityPreview', 'sapi', 'GET', $params);
    }
    public function sapi_get_bswap_unclaimedrewards($params = array()) {
        return $this->request('bswap/unclaimedRewards', 'sapi', 'GET', $params);
    }
    public function sapi_get_bswap_claimedhistory($params = array()) {
        return $this->request('bswap/claimedHistory', 'sapi', 'GET', $params);
    }
    public function sapi_get_blvt_tokeninfo($params = array()) {
        return $this->request('blvt/tokenInfo', 'sapi', 'GET', $params);
    }
    public function sapi_get_blvt_subscribe_record($params = array()) {
        return $this->request('blvt/subscribe/record', 'sapi', 'GET', $params);
    }
    public function sapi_get_blvt_redeem_record($params = array()) {
        return $this->request('blvt/redeem/record', 'sapi', 'GET', $params);
    }
    public function sapi_get_blvt_userlimit($params = array()) {
        return $this->request('blvt/userLimit', 'sapi', 'GET', $params);
    }
    public function sapi_get_apireferral_ifnewuser($params = array()) {
        return $this->request('apiReferral/ifNewUser', 'sapi', 'GET', $params);
    }
    public function sapi_get_apireferral_customization($params = array()) {
        return $this->request('apiReferral/customization', 'sapi', 'GET', $params);
    }
    public function sapi_get_apireferral_usercustomization($params = array()) {
        return $this->request('apiReferral/userCustomization', 'sapi', 'GET', $params);
    }
    public function sapi_get_apireferral_rebate_recentrecord($params = array()) {
        return $this->request('apiReferral/rebate/recentRecord', 'sapi', 'GET', $params);
    }
    public function sapi_get_apireferral_rebate_historicalrecord($params = array()) {
        return $this->request('apiReferral/rebate/historicalRecord', 'sapi', 'GET', $params);
    }
    public function sapi_get_apireferral_kickback_recentrecord($params = array()) {
        return $this->request('apiReferral/kickback/recentRecord', 'sapi', 'GET', $params);
    }
    public function sapi_get_apireferral_kickback_historicalrecord($params = array()) {
        return $this->request('apiReferral/kickback/historicalRecord', 'sapi', 'GET', $params);
    }
    public function sapi_get_broker_subaccountapi($params = array()) {
        return $this->request('broker/subAccountApi', 'sapi', 'GET', $params);
    }
    public function sapi_get_broker_subaccount($params = array()) {
        return $this->request('broker/subAccount', 'sapi', 'GET', $params);
    }
    public function sapi_get_broker_subaccountapi_commission_futures($params = array()) {
        return $this->request('broker/subAccountApi/commission/futures', 'sapi', 'GET', $params);
    }
    public function sapi_get_broker_subaccountapi_commission_coinfutures($params = array()) {
        return $this->request('broker/subAccountApi/commission/coinFutures', 'sapi', 'GET', $params);
    }
    public function sapi_get_broker_info($params = array()) {
        return $this->request('broker/info', 'sapi', 'GET', $params);
    }
    public function sapi_get_broker_transfer($params = array()) {
        return $this->request('broker/transfer', 'sapi', 'GET', $params);
    }
    public function sapi_get_broker_transfer_futures($params = array()) {
        return $this->request('broker/transfer/futures', 'sapi', 'GET', $params);
    }
    public function sapi_get_broker_rebate_recentrecord($params = array()) {
        return $this->request('broker/rebate/recentRecord', 'sapi', 'GET', $params);
    }
    public function sapi_get_broker_rebate_historicalrecord($params = array()) {
        return $this->request('broker/rebate/historicalRecord', 'sapi', 'GET', $params);
    }
    public function sapi_get_broker_subaccount_bnbburn_status($params = array()) {
        return $this->request('broker/subAccount/bnbBurn/status', 'sapi', 'GET', $params);
    }
    public function sapi_get_broker_subaccount_deposithist($params = array()) {
        return $this->request('broker/subAccount/depositHist', 'sapi', 'GET', $params);
    }
    public function sapi_get_broker_subaccount_spotsummary($params = array()) {
        return $this->request('broker/subAccount/spotSummary', 'sapi', 'GET', $params);
    }
    public function sapi_get_broker_subaccount_marginsummary($params = array()) {
        return $this->request('broker/subAccount/marginSummary', 'sapi', 'GET', $params);
    }
    public function sapi_get_broker_subaccount_futuressummary($params = array()) {
        return $this->request('broker/subAccount/futuresSummary', 'sapi', 'GET', $params);
    }
    public function sapi_get_broker_rebate_futures_recentrecord($params = array()) {
        return $this->request('broker/rebate/futures/recentRecord', 'sapi', 'GET', $params);
    }
    public function sapi_get_broker_subaccountapi_iprestriction($params = array()) {
        return $this->request('broker/subAccountApi/ipRestriction', 'sapi', 'GET', $params);
    }
    public function sapi_get_broker_universaltransfer($params = array()) {
        return $this->request('broker/universalTransfer', 'sapi', 'GET', $params);
    }
    public function sapi_get_account_apirestrictions($params = array()) {
        return $this->request('account/apiRestrictions', 'sapi', 'GET', $params);
    }
    public function sapi_get_c2c_ordermatch_listuserorderhistory($params = array()) {
        return $this->request('c2c/orderMatch/listUserOrderHistory', 'sapi', 'GET', $params);
    }
    public function sapi_get_nft_history_transactions($params = array()) {
        return $this->request('nft/history/transactions', 'sapi', 'GET', $params);
    }
    public function sapi_get_nft_history_deposit($params = array()) {
        return $this->request('nft/history/deposit', 'sapi', 'GET', $params);
    }
    public function sapi_get_nft_history_withdraw($params = array()) {
        return $this->request('nft/history/withdraw', 'sapi', 'GET', $params);
    }
    public function sapi_get_nft_user_getasset($params = array()) {
        return $this->request('nft/user/getAsset', 'sapi', 'GET', $params);
    }
    public function sapi_get_pay_transactions($params = array()) {
        return $this->request('pay/transactions', 'sapi', 'GET', $params);
    }
    public function sapi_get_giftcard_verify($params = array()) {
        return $this->request('giftcard/verify', 'sapi', 'GET', $params);
    }
    public function sapi_get_giftcard_cryptography_rsa_public_key($params = array()) {
        return $this->request('giftcard/cryptography/rsa-public-key', 'sapi', 'GET', $params);
    }
    public function sapi_get_giftcard_buycode_token_limit($params = array()) {
        return $this->request('giftcard/buyCode/token-limit', 'sapi', 'GET', $params);
    }
    public function sapi_get_algo_futures_openorders($params = array()) {
        return $this->request('algo/futures/openOrders', 'sapi', 'GET', $params);
    }
    public function sapi_get_algo_futures_historicalorders($params = array()) {
        return $this->request('algo/futures/historicalOrders', 'sapi', 'GET', $params);
    }
    public function sapi_get_algo_futures_suborders($params = array()) {
        return $this->request('algo/futures/subOrders', 'sapi', 'GET', $params);
    }
    public function sapi_get_portfolio_account($params = array()) {
        return $this->request('portfolio/account', 'sapi', 'GET', $params);
    }
    public function sapi_get_portfolio_collateralrate($params = array()) {
        return $this->request('portfolio/collateralRate', 'sapi', 'GET', $params);
    }
    public function sapi_get_portfolio_pmloan($params = array()) {
        return $this->request('portfolio/pmLoan', 'sapi', 'GET', $params);
    }
    public function sapi_get_portfolio_interest_history($params = array()) {
        return $this->request('portfolio/interest-history', 'sapi', 'GET', $params);
    }
    public function sapi_get_portfolio_interest_rate($params = array()) {
        return $this->request('portfolio/interest-rate', 'sapi', 'GET', $params);
    }
    public function sapi_get_staking_productlist($params = array()) {
        return $this->request('staking/productList', 'sapi', 'GET', $params);
    }
    public function sapi_get_staking_position($params = array()) {
        return $this->request('staking/position', 'sapi', 'GET', $params);
    }
    public function sapi_get_staking_stakingrecord($params = array()) {
        return $this->request('staking/stakingRecord', 'sapi', 'GET', $params);
    }
    public function sapi_get_staking_personalleftquota($params = array()) {
        return $this->request('staking/personalLeftQuota', 'sapi', 'GET', $params);
    }
    public function sapi_post_asset_dust($params = array()) {
        return $this->request('asset/dust', 'sapi', 'POST', $params);
    }
    public function sapi_post_asset_dust_btc($params = array()) {
        return $this->request('asset/dust-btc', 'sapi', 'POST', $params);
    }
    public function sapi_post_asset_transfer($params = array()) {
        return $this->request('asset/transfer', 'sapi', 'POST', $params);
    }
    public function sapi_post_asset_get_funding_asset($params = array()) {
        return $this->request('asset/get-funding-asset', 'sapi', 'POST', $params);
    }
    public function sapi_post_asset_convert_transfer($params = array()) {
        return $this->request('asset/convert-transfer', 'sapi', 'POST', $params);
    }
    public function sapi_post_account_disablefastwithdrawswitch($params = array()) {
        return $this->request('account/disableFastWithdrawSwitch', 'sapi', 'POST', $params);
    }
    public function sapi_post_account_enablefastwithdrawswitch($params = array()) {
        return $this->request('account/enableFastWithdrawSwitch', 'sapi', 'POST', $params);
    }
    public function sapi_post_capital_withdraw_apply($params = array()) {
        return $this->request('capital/withdraw/apply', 'sapi', 'POST', $params);
    }
    public function sapi_post_capital_contract_convertible_coins($params = array()) {
        return $this->request('capital/contract/convertible-coins', 'sapi', 'POST', $params);
    }
    public function sapi_post_margin_transfer($params = array()) {
        return $this->request('margin/transfer', 'sapi', 'POST', $params);
    }
    public function sapi_post_margin_loan($params = array()) {
        return $this->request('margin/loan', 'sapi', 'POST', $params);
    }
    public function sapi_post_margin_repay($params = array()) {
        return $this->request('margin/repay', 'sapi', 'POST', $params);
    }
    public function sapi_post_margin_order($params = array()) {
        return $this->request('margin/order', 'sapi', 'POST', $params);
    }
    public function sapi_post_margin_order_oco($params = array()) {
        return $this->request('margin/order/oco', 'sapi', 'POST', $params);
    }
    public function sapi_post_margin_exchange_small_liability($params = array()) {
        return $this->request('margin/exchange-small-liability', 'sapi', 'POST', $params);
    }
    public function sapi_post_margin_isolated_transfer($params = array()) {
        return $this->request('margin/isolated/transfer', 'sapi', 'POST', $params);
    }
    public function sapi_post_margin_isolated_account($params = array()) {
        return $this->request('margin/isolated/account', 'sapi', 'POST', $params);
    }
    public function sapi_post_bnbburn($params = array()) {
        return $this->request('bnbBurn', 'sapi', 'POST', $params);
    }
    public function sapi_post_sub_account_virtualsubaccount($params = array()) {
        return $this->request('sub-account/virtualSubAccount', 'sapi', 'POST', $params);
    }
    public function sapi_post_sub_account_margin_transfer($params = array()) {
        return $this->request('sub-account/margin/transfer', 'sapi', 'POST', $params);
    }
    public function sapi_post_sub_account_margin_enable($params = array()) {
        return $this->request('sub-account/margin/enable', 'sapi', 'POST', $params);
    }
    public function sapi_post_sub_account_futures_enable($params = array()) {
        return $this->request('sub-account/futures/enable', 'sapi', 'POST', $params);
    }
    public function sapi_post_sub_account_futures_transfer($params = array()) {
        return $this->request('sub-account/futures/transfer', 'sapi', 'POST', $params);
    }
    public function sapi_post_sub_account_futures_internaltransfer($params = array()) {
        return $this->request('sub-account/futures/internalTransfer', 'sapi', 'POST', $params);
    }
    public function sapi_post_sub_account_transfer_subtosub($params = array()) {
        return $this->request('sub-account/transfer/subToSub', 'sapi', 'POST', $params);
    }
    public function sapi_post_sub_account_transfer_subtomaster($params = array()) {
        return $this->request('sub-account/transfer/subToMaster', 'sapi', 'POST', $params);
    }
    public function sapi_post_sub_account_universaltransfer($params = array()) {
        return $this->request('sub-account/universalTransfer', 'sapi', 'POST', $params);
    }
    public function sapi_post_managed_subaccount_deposit($params = array()) {
        return $this->request('managed-subaccount/deposit', 'sapi', 'POST', $params);
    }
    public function sapi_post_managed_subaccount_withdraw($params = array()) {
        return $this->request('managed-subaccount/withdraw', 'sapi', 'POST', $params);
    }
    public function sapi_post_userdatastream($params = array()) {
        return $this->request('userDataStream', 'sapi', 'POST', $params);
    }
    public function sapi_post_userdatastream_isolated($params = array()) {
        return $this->request('userDataStream/isolated', 'sapi', 'POST', $params);
    }
    public function sapi_post_futures_transfer($params = array()) {
        return $this->request('futures/transfer', 'sapi', 'POST', $params);
    }
    public function sapi_post_lending_customizedfixed_purchase($params = array()) {
        return $this->request('lending/customizedFixed/purchase', 'sapi', 'POST', $params);
    }
    public function sapi_post_lending_daily_purchase($params = array()) {
        return $this->request('lending/daily/purchase', 'sapi', 'POST', $params);
    }
    public function sapi_post_lending_daily_redeem($params = array()) {
        return $this->request('lending/daily/redeem', 'sapi', 'POST', $params);
    }
    public function sapi_post_bswap_liquidityadd($params = array()) {
        return $this->request('bswap/liquidityAdd', 'sapi', 'POST', $params);
    }
    public function sapi_post_bswap_liquidityremove($params = array()) {
        return $this->request('bswap/liquidityRemove', 'sapi', 'POST', $params);
    }
    public function sapi_post_bswap_swap($params = array()) {
        return $this->request('bswap/swap', 'sapi', 'POST', $params);
    }
    public function sapi_post_bswap_claimrewards($params = array()) {
        return $this->request('bswap/claimRewards', 'sapi', 'POST', $params);
    }
    public function sapi_post_blvt_subscribe($params = array()) {
        return $this->request('blvt/subscribe', 'sapi', 'POST', $params);
    }
    public function sapi_post_blvt_redeem($params = array()) {
        return $this->request('blvt/redeem', 'sapi', 'POST', $params);
    }
    public function sapi_post_apireferral_customization($params = array()) {
        return $this->request('apiReferral/customization', 'sapi', 'POST', $params);
    }
    public function sapi_post_apireferral_usercustomization($params = array()) {
        return $this->request('apiReferral/userCustomization', 'sapi', 'POST', $params);
    }
    public function sapi_post_apireferral_rebate_historicalrecord($params = array()) {
        return $this->request('apiReferral/rebate/historicalRecord', 'sapi', 'POST', $params);
    }
    public function sapi_post_apireferral_kickback_historicalrecord($params = array()) {
        return $this->request('apiReferral/kickback/historicalRecord', 'sapi', 'POST', $params);
    }
    public function sapi_post_broker_subaccount($params = array()) {
        return $this->request('broker/subAccount', 'sapi', 'POST', $params);
    }
    public function sapi_post_broker_subaccount_margin($params = array()) {
        return $this->request('broker/subAccount/margin', 'sapi', 'POST', $params);
    }
    public function sapi_post_broker_subaccount_futures($params = array()) {
        return $this->request('broker/subAccount/futures', 'sapi', 'POST', $params);
    }
    public function sapi_post_broker_subaccountapi($params = array()) {
        return $this->request('broker/subAccountApi', 'sapi', 'POST', $params);
    }
    public function sapi_post_broker_subaccountapi_permission($params = array()) {
        return $this->request('broker/subAccountApi/permission', 'sapi', 'POST', $params);
    }
    public function sapi_post_broker_subaccountapi_commission($params = array()) {
        return $this->request('broker/subAccountApi/commission', 'sapi', 'POST', $params);
    }
    public function sapi_post_broker_subaccountapi_commission_futures($params = array()) {
        return $this->request('broker/subAccountApi/commission/futures', 'sapi', 'POST', $params);
    }
    public function sapi_post_broker_subaccountapi_commission_coinfutures($params = array()) {
        return $this->request('broker/subAccountApi/commission/coinFutures', 'sapi', 'POST', $params);
    }
    public function sapi_post_broker_transfer($params = array()) {
        return $this->request('broker/transfer', 'sapi', 'POST', $params);
    }
    public function sapi_post_broker_transfer_futures($params = array()) {
        return $this->request('broker/transfer/futures', 'sapi', 'POST', $params);
    }
    public function sapi_post_broker_rebate_historicalrecord($params = array()) {
        return $this->request('broker/rebate/historicalRecord', 'sapi', 'POST', $params);
    }
    public function sapi_post_broker_subaccount_bnbburn_spot($params = array()) {
        return $this->request('broker/subAccount/bnbBurn/spot', 'sapi', 'POST', $params);
    }
    public function sapi_post_broker_subaccount_bnbburn_margininterest($params = array()) {
        return $this->request('broker/subAccount/bnbBurn/marginInterest', 'sapi', 'POST', $params);
    }
    public function sapi_post_broker_subaccount_blvt($params = array()) {
        return $this->request('broker/subAccount/blvt', 'sapi', 'POST', $params);
    }
    public function sapi_post_broker_subaccountapi_iprestriction($params = array()) {
        return $this->request('broker/subAccountApi/ipRestriction', 'sapi', 'POST', $params);
    }
    public function sapi_post_broker_subaccountapi_iprestriction_iplist($params = array()) {
        return $this->request('broker/subAccountApi/ipRestriction/ipList', 'sapi', 'POST', $params);
    }
    public function sapi_post_broker_universaltransfer($params = array()) {
        return $this->request('broker/universalTransfer', 'sapi', 'POST', $params);
    }
    public function sapi_post_broker_subaccountapi_permission_universaltransfer($params = array()) {
        return $this->request('broker/subAccountApi/permission/universalTransfer', 'sapi', 'POST', $params);
    }
    public function sapi_post_broker_subaccountapi_permission_vanillaoptions($params = array()) {
        return $this->request('broker/subAccountApi/permission/vanillaOptions', 'sapi', 'POST', $params);
    }
    public function sapi_post_giftcard_createcode($params = array()) {
        return $this->request('giftcard/createCode', 'sapi', 'POST', $params);
    }
    public function sapi_post_giftcard_redeemcode($params = array()) {
        return $this->request('giftcard/redeemCode', 'sapi', 'POST', $params);
    }
    public function sapi_post_giftcard_buycode($params = array()) {
        return $this->request('giftcard/buyCode', 'sapi', 'POST', $params);
    }
    public function sapi_post_algo_futures_newordervp($params = array()) {
        return $this->request('algo/futures/newOrderVp', 'sapi', 'POST', $params);
    }
    public function sapi_post_algo_futures_newordertwap($params = array()) {
        return $this->request('algo/futures/newOrderTwap', 'sapi', 'POST', $params);
    }
    public function sapi_post_staking_purchase($params = array()) {
        return $this->request('staking/purchase', 'sapi', 'POST', $params);
    }
    public function sapi_post_staking_redeem($params = array()) {
        return $this->request('staking/redeem', 'sapi', 'POST', $params);
    }
    public function sapi_post_staking_setautostaking($params = array()) {
        return $this->request('staking/setAutoStaking', 'sapi', 'POST', $params);
    }
    public function sapi_post_portfolio_repay($params = array()) {
        return $this->request('portfolio/repay', 'sapi', 'POST', $params);
    }
    public function sapi_post_loan_borrow($params = array()) {
        return $this->request('loan/borrow', 'sapi', 'POST', $params);
    }
    public function sapi_post_loan_repay($params = array()) {
        return $this->request('loan/repay', 'sapi', 'POST', $params);
    }
    public function sapi_post_loan_adjust_ltv($params = array()) {
        return $this->request('loan/adjust/ltv', 'sapi', 'POST', $params);
    }
    public function sapi_post_loan_customize_margin_call($params = array()) {
        return $this->request('loan/customize/margin_call', 'sapi', 'POST', $params);
    }
    public function sapi_post_loan_vip_repay($params = array()) {
        return $this->request('loan/vip/repay', 'sapi', 'POST', $params);
    }
    public function sapi_post_convert_getquote($params = array()) {
        return $this->request('convert/getQuote', 'sapi', 'POST', $params);
    }
    public function sapi_post_convert_acceptquote($params = array()) {
        return $this->request('convert/acceptQuote', 'sapi', 'POST', $params);
    }
    public function sapi_put_userdatastream($params = array()) {
        return $this->request('userDataStream', 'sapi', 'PUT', $params);
    }
    public function sapi_put_userdatastream_isolated($params = array()) {
        return $this->request('userDataStream/isolated', 'sapi', 'PUT', $params);
    }
    public function sapi_delete_margin_openorders($params = array()) {
        return $this->request('margin/openOrders', 'sapi', 'DELETE', $params);
    }
    public function sapi_delete_margin_order($params = array()) {
        return $this->request('margin/order', 'sapi', 'DELETE', $params);
    }
    public function sapi_delete_margin_orderlist($params = array()) {
        return $this->request('margin/orderList', 'sapi', 'DELETE', $params);
    }
    public function sapi_delete_margin_isolated_account($params = array()) {
        return $this->request('margin/isolated/account', 'sapi', 'DELETE', $params);
    }
    public function sapi_delete_userdatastream($params = array()) {
        return $this->request('userDataStream', 'sapi', 'DELETE', $params);
    }
    public function sapi_delete_userdatastream_isolated($params = array()) {
        return $this->request('userDataStream/isolated', 'sapi', 'DELETE', $params);
    }
    public function sapi_delete_broker_subaccountapi($params = array()) {
        return $this->request('broker/subAccountApi', 'sapi', 'DELETE', $params);
    }
    public function sapi_delete_broker_subaccountapi_iprestriction_iplist($params = array()) {
        return $this->request('broker/subAccountApi/ipRestriction/ipList', 'sapi', 'DELETE', $params);
    }
    public function sapi_delete_algo_futures_order($params = array()) {
        return $this->request('algo/futures/order', 'sapi', 'DELETE', $params);
    }
    public function sapiv2_get_sub_account_futures_account($params = array()) {
        return $this->request('sub-account/futures/account', 'sapiV2', 'GET', $params);
    }
    public function sapiv2_get_sub_account_futures_positionrisk($params = array()) {
        return $this->request('sub-account/futures/positionRisk', 'sapiV2', 'GET', $params);
    }
    public function sapiv3_get_sub_account_assets($params = array()) {
        return $this->request('sub-account/assets', 'sapiV3', 'GET', $params);
    }
    public function sapiv3_post_asset_getuserasset($params = array()) {
        return $this->request('asset/getUserAsset', 'sapiV3', 'POST', $params);
    }
    public function sapiv4_get_sub_account_assets($params = array()) {
        return $this->request('sub-account/assets', 'sapiV4', 'GET', $params);
    }
    public function wapi_post_withdraw($params = array()) {
        return $this->request('withdraw', 'wapi', 'POST', $params);
    }
    public function wapi_post_sub_account_transfer($params = array()) {
        return $this->request('sub-account/transfer', 'wapi', 'POST', $params);
    }
    public function wapi_get_deposithistory($params = array()) {
        return $this->request('depositHistory', 'wapi', 'GET', $params);
    }
    public function wapi_get_withdrawhistory($params = array()) {
        return $this->request('withdrawHistory', 'wapi', 'GET', $params);
    }
    public function wapi_get_depositaddress($params = array()) {
        return $this->request('depositAddress', 'wapi', 'GET', $params);
    }
    public function wapi_get_accountstatus($params = array()) {
        return $this->request('accountStatus', 'wapi', 'GET', $params);
    }
    public function wapi_get_systemstatus($params = array()) {
        return $this->request('systemStatus', 'wapi', 'GET', $params);
    }
    public function wapi_get_apitradingstatus($params = array()) {
        return $this->request('apiTradingStatus', 'wapi', 'GET', $params);
    }
    public function wapi_get_userassetdribbletlog($params = array()) {
        return $this->request('userAssetDribbletLog', 'wapi', 'GET', $params);
    }
    public function wapi_get_tradefee($params = array()) {
        return $this->request('tradeFee', 'wapi', 'GET', $params);
    }
    public function wapi_get_assetdetail($params = array()) {
        return $this->request('assetDetail', 'wapi', 'GET', $params);
    }
    public function wapi_get_sub_account_list($params = array()) {
        return $this->request('sub-account/list', 'wapi', 'GET', $params);
    }
    public function wapi_get_sub_account_transfer_history($params = array()) {
        return $this->request('sub-account/transfer/history', 'wapi', 'GET', $params);
    }
    public function wapi_get_sub_account_assets($params = array()) {
        return $this->request('sub-account/assets', 'wapi', 'GET', $params);
    }
    public function dapipublic_get_ping($params = array()) {
        return $this->request('ping', 'dapiPublic', 'GET', $params);
    }
    public function dapipublic_get_time($params = array()) {
        return $this->request('time', 'dapiPublic', 'GET', $params);
    }
    public function dapipublic_get_exchangeinfo($params = array()) {
        return $this->request('exchangeInfo', 'dapiPublic', 'GET', $params);
    }
    public function dapipublic_get_depth($params = array()) {
        return $this->request('depth', 'dapiPublic', 'GET', $params);
    }
    public function dapipublic_get_trades($params = array()) {
        return $this->request('trades', 'dapiPublic', 'GET', $params);
    }
    public function dapipublic_get_historicaltrades($params = array()) {
        return $this->request('historicalTrades', 'dapiPublic', 'GET', $params);
    }
    public function dapipublic_get_aggtrades($params = array()) {
        return $this->request('aggTrades', 'dapiPublic', 'GET', $params);
    }
    public function dapipublic_get_premiumindex($params = array()) {
        return $this->request('premiumIndex', 'dapiPublic', 'GET', $params);
    }
    public function dapipublic_get_fundingrate($params = array()) {
        return $this->request('fundingRate', 'dapiPublic', 'GET', $params);
    }
    public function dapipublic_get_klines($params = array()) {
        return $this->request('klines', 'dapiPublic', 'GET', $params);
    }
    public function dapipublic_get_continuousklines($params = array()) {
        return $this->request('continuousKlines', 'dapiPublic', 'GET', $params);
    }
    public function dapipublic_get_indexpriceklines($params = array()) {
        return $this->request('indexPriceKlines', 'dapiPublic', 'GET', $params);
    }
    public function dapipublic_get_markpriceklines($params = array()) {
        return $this->request('markPriceKlines', 'dapiPublic', 'GET', $params);
    }
    public function dapipublic_get_ticker_24hr($params = array()) {
        return $this->request('ticker/24hr', 'dapiPublic', 'GET', $params);
    }
    public function dapipublic_get_ticker_price($params = array()) {
        return $this->request('ticker/price', 'dapiPublic', 'GET', $params);
    }
    public function dapipublic_get_ticker_bookticker($params = array()) {
        return $this->request('ticker/bookTicker', 'dapiPublic', 'GET', $params);
    }
    public function dapipublic_get_openinterest($params = array()) {
        return $this->request('openInterest', 'dapiPublic', 'GET', $params);
    }
    public function dapipublic_get_pmexchangeinfo($params = array()) {
        return $this->request('pmExchangeInfo', 'dapiPublic', 'GET', $params);
    }
    public function dapidata_get_openinteresthist($params = array()) {
        return $this->request('openInterestHist', 'dapiData', 'GET', $params);
    }
    public function dapidata_get_toplongshortaccountratio($params = array()) {
        return $this->request('topLongShortAccountRatio', 'dapiData', 'GET', $params);
    }
    public function dapidata_get_toplongshortpositionratio($params = array()) {
        return $this->request('topLongShortPositionRatio', 'dapiData', 'GET', $params);
    }
    public function dapidata_get_globallongshortaccountratio($params = array()) {
        return $this->request('globalLongShortAccountRatio', 'dapiData', 'GET', $params);
    }
    public function dapidata_get_takerbuysellvol($params = array()) {
        return $this->request('takerBuySellVol', 'dapiData', 'GET', $params);
    }
    public function dapidata_get_basis($params = array()) {
        return $this->request('basis', 'dapiData', 'GET', $params);
    }
    public function dapiprivate_get_positionside_dual($params = array()) {
        return $this->request('positionSide/dual', 'dapiPrivate', 'GET', $params);
    }
    public function dapiprivate_get_order($params = array()) {
        return $this->request('order', 'dapiPrivate', 'GET', $params);
    }
    public function dapiprivate_get_openorder($params = array()) {
        return $this->request('openOrder', 'dapiPrivate', 'GET', $params);
    }
    public function dapiprivate_get_openorders($params = array()) {
        return $this->request('openOrders', 'dapiPrivate', 'GET', $params);
    }
    public function dapiprivate_get_allorders($params = array()) {
        return $this->request('allOrders', 'dapiPrivate', 'GET', $params);
    }
    public function dapiprivate_get_balance($params = array()) {
        return $this->request('balance', 'dapiPrivate', 'GET', $params);
    }
    public function dapiprivate_get_account($params = array()) {
        return $this->request('account', 'dapiPrivate', 'GET', $params);
    }
    public function dapiprivate_get_positionmargin_history($params = array()) {
        return $this->request('positionMargin/history', 'dapiPrivate', 'GET', $params);
    }
    public function dapiprivate_get_positionrisk($params = array()) {
        return $this->request('positionRisk', 'dapiPrivate', 'GET', $params);
    }
    public function dapiprivate_get_usertrades($params = array()) {
        return $this->request('userTrades', 'dapiPrivate', 'GET', $params);
    }
    public function dapiprivate_get_income($params = array()) {
        return $this->request('income', 'dapiPrivate', 'GET', $params);
    }
    public function dapiprivate_get_leveragebracket($params = array()) {
        return $this->request('leverageBracket', 'dapiPrivate', 'GET', $params);
    }
    public function dapiprivate_get_forceorders($params = array()) {
        return $this->request('forceOrders', 'dapiPrivate', 'GET', $params);
    }
    public function dapiprivate_get_adlquantile($params = array()) {
        return $this->request('adlQuantile', 'dapiPrivate', 'GET', $params);
    }
    public function dapiprivate_get_orderamendment($params = array()) {
        return $this->request('orderAmendment', 'dapiPrivate', 'GET', $params);
    }
    public function dapiprivate_get_pmaccountinfo($params = array()) {
        return $this->request('pmAccountInfo', 'dapiPrivate', 'GET', $params);
    }
    public function dapiprivate_post_positionside_dual($params = array()) {
        return $this->request('positionSide/dual', 'dapiPrivate', 'POST', $params);
    }
    public function dapiprivate_post_order($params = array()) {
        return $this->request('order', 'dapiPrivate', 'POST', $params);
    }
    public function dapiprivate_post_batchorders($params = array()) {
        return $this->request('batchOrders', 'dapiPrivate', 'POST', $params);
    }
    public function dapiprivate_post_countdowncancelall($params = array()) {
        return $this->request('countdownCancelAll', 'dapiPrivate', 'POST', $params);
    }
    public function dapiprivate_post_leverage($params = array()) {
        return $this->request('leverage', 'dapiPrivate', 'POST', $params);
    }
    public function dapiprivate_post_margintype($params = array()) {
        return $this->request('marginType', 'dapiPrivate', 'POST', $params);
    }
    public function dapiprivate_post_positionmargin($params = array()) {
        return $this->request('positionMargin', 'dapiPrivate', 'POST', $params);
    }
    public function dapiprivate_post_listenkey($params = array()) {
        return $this->request('listenKey', 'dapiPrivate', 'POST', $params);
    }
    public function dapiprivate_put_listenkey($params = array()) {
        return $this->request('listenKey', 'dapiPrivate', 'PUT', $params);
    }
    public function dapiprivate_put_order($params = array()) {
        return $this->request('order', 'dapiPrivate', 'PUT', $params);
    }
    public function dapiprivate_put_batchorders($params = array()) {
        return $this->request('batchOrders', 'dapiPrivate', 'PUT', $params);
    }
    public function dapiprivate_delete_order($params = array()) {
        return $this->request('order', 'dapiPrivate', 'DELETE', $params);
    }
    public function dapiprivate_delete_allopenorders($params = array()) {
        return $this->request('allOpenOrders', 'dapiPrivate', 'DELETE', $params);
    }
    public function dapiprivate_delete_batchorders($params = array()) {
        return $this->request('batchOrders', 'dapiPrivate', 'DELETE', $params);
    }
    public function dapiprivate_delete_listenkey($params = array()) {
        return $this->request('listenKey', 'dapiPrivate', 'DELETE', $params);
    }
    public function dapiprivatev2_get_leveragebracket($params = array()) {
        return $this->request('leverageBracket', 'dapiPrivateV2', 'GET', $params);
    }
    public function fapipublic_get_ping($params = array()) {
        return $this->request('ping', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_time($params = array()) {
        return $this->request('time', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_exchangeinfo($params = array()) {
        return $this->request('exchangeInfo', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_depth($params = array()) {
        return $this->request('depth', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_trades($params = array()) {
        return $this->request('trades', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_historicaltrades($params = array()) {
        return $this->request('historicalTrades', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_aggtrades($params = array()) {
        return $this->request('aggTrades', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_klines($params = array()) {
        return $this->request('klines', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_continuousklines($params = array()) {
        return $this->request('continuousKlines', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_markpriceklines($params = array()) {
        return $this->request('markPriceKlines', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_indexpriceklines($params = array()) {
        return $this->request('indexPriceKlines', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_fundingrate($params = array()) {
        return $this->request('fundingRate', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_premiumindex($params = array()) {
        return $this->request('premiumIndex', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_ticker_24hr($params = array()) {
        return $this->request('ticker/24hr', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_ticker_price($params = array()) {
        return $this->request('ticker/price', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_ticker_bookticker($params = array()) {
        return $this->request('ticker/bookTicker', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_openinterest($params = array()) {
        return $this->request('openInterest', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_indexinfo($params = array()) {
        return $this->request('indexInfo', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_apitradingstatus($params = array()) {
        return $this->request('apiTradingStatus', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_lvtklines($params = array()) {
        return $this->request('lvtKlines', 'fapiPublic', 'GET', $params);
    }
    public function fapipublic_get_pmexchangeinfo($params = array()) {
        return $this->request('pmExchangeInfo', 'fapiPublic', 'GET', $params);
    }
    public function fapidata_get_openinteresthist($params = array()) {
        return $this->request('openInterestHist', 'fapiData', 'GET', $params);
    }
    public function fapidata_get_toplongshortaccountratio($params = array()) {
        return $this->request('topLongShortAccountRatio', 'fapiData', 'GET', $params);
    }
    public function fapidata_get_toplongshortpositionratio($params = array()) {
        return $this->request('topLongShortPositionRatio', 'fapiData', 'GET', $params);
    }
    public function fapidata_get_globallongshortaccountratio($params = array()) {
        return $this->request('globalLongShortAccountRatio', 'fapiData', 'GET', $params);
    }
    public function fapidata_get_takerlongshortratio($params = array()) {
        return $this->request('takerlongshortRatio', 'fapiData', 'GET', $params);
    }
    public function fapiprivate_get_forceorders($params = array()) {
        return $this->request('forceOrders', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_allorders($params = array()) {
        return $this->request('allOrders', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_openorder($params = array()) {
        return $this->request('openOrder', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_openorders($params = array()) {
        return $this->request('openOrders', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_order($params = array()) {
        return $this->request('order', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_account($params = array()) {
        return $this->request('account', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_balance($params = array()) {
        return $this->request('balance', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_leveragebracket($params = array()) {
        return $this->request('leverageBracket', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_positionmargin_history($params = array()) {
        return $this->request('positionMargin/history', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_positionrisk($params = array()) {
        return $this->request('positionRisk', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_positionside_dual($params = array()) {
        return $this->request('positionSide/dual', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_usertrades($params = array()) {
        return $this->request('userTrades', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_income($params = array()) {
        return $this->request('income', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_commissionrate($params = array()) {
        return $this->request('commissionRate', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_apitradingstatus($params = array()) {
        return $this->request('apiTradingStatus', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_multiassetsmargin($params = array()) {
        return $this->request('multiAssetsMargin', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_apireferral_ifnewuser($params = array()) {
        return $this->request('apiReferral/ifNewUser', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_apireferral_customization($params = array()) {
        return $this->request('apiReferral/customization', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_apireferral_usercustomization($params = array()) {
        return $this->request('apiReferral/userCustomization', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_apireferral_tradernum($params = array()) {
        return $this->request('apiReferral/traderNum', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_apireferral_overview($params = array()) {
        return $this->request('apiReferral/overview', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_apireferral_tradevol($params = array()) {
        return $this->request('apiReferral/tradeVol', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_apireferral_rebatevol($params = array()) {
        return $this->request('apiReferral/rebateVol', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_apireferral_tradersummary($params = array()) {
        return $this->request('apiReferral/traderSummary', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_adlquantile($params = array()) {
        return $this->request('adlQuantile', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_get_pmaccountinfo($params = array()) {
        return $this->request('pmAccountInfo', 'fapiPrivate', 'GET', $params);
    }
    public function fapiprivate_post_batchorders($params = array()) {
        return $this->request('batchOrders', 'fapiPrivate', 'POST', $params);
    }
    public function fapiprivate_post_positionside_dual($params = array()) {
        return $this->request('positionSide/dual', 'fapiPrivate', 'POST', $params);
    }
    public function fapiprivate_post_positionmargin($params = array()) {
        return $this->request('positionMargin', 'fapiPrivate', 'POST', $params);
    }
    public function fapiprivate_post_margintype($params = array()) {
        return $this->request('marginType', 'fapiPrivate', 'POST', $params);
    }
    public function fapiprivate_post_order($params = array()) {
        return $this->request('order', 'fapiPrivate', 'POST', $params);
    }
    public function fapiprivate_post_leverage($params = array()) {
        return $this->request('leverage', 'fapiPrivate', 'POST', $params);
    }
    public function fapiprivate_post_listenkey($params = array()) {
        return $this->request('listenKey', 'fapiPrivate', 'POST', $params);
    }
    public function fapiprivate_post_countdowncancelall($params = array()) {
        return $this->request('countdownCancelAll', 'fapiPrivate', 'POST', $params);
    }
    public function fapiprivate_post_multiassetsmargin($params = array()) {
        return $this->request('multiAssetsMargin', 'fapiPrivate', 'POST', $params);
    }
    public function fapiprivate_post_apireferral_customization($params = array()) {
        return $this->request('apiReferral/customization', 'fapiPrivate', 'POST', $params);
    }
    public function fapiprivate_post_apireferral_usercustomization($params = array()) {
        return $this->request('apiReferral/userCustomization', 'fapiPrivate', 'POST', $params);
    }
    public function fapiprivate_put_listenkey($params = array()) {
        return $this->request('listenKey', 'fapiPrivate', 'PUT', $params);
    }
    public function fapiprivate_delete_batchorders($params = array()) {
        return $this->request('batchOrders', 'fapiPrivate', 'DELETE', $params);
    }
    public function fapiprivate_delete_order($params = array()) {
        return $this->request('order', 'fapiPrivate', 'DELETE', $params);
    }
    public function fapiprivate_delete_allopenorders($params = array()) {
        return $this->request('allOpenOrders', 'fapiPrivate', 'DELETE', $params);
    }
    public function fapiprivate_delete_listenkey($params = array()) {
        return $this->request('listenKey', 'fapiPrivate', 'DELETE', $params);
    }
    public function fapiprivatev2_get_account($params = array()) {
        return $this->request('account', 'fapiPrivateV2', 'GET', $params);
    }
    public function fapiprivatev2_get_balance($params = array()) {
        return $this->request('balance', 'fapiPrivateV2', 'GET', $params);
    }
    public function fapiprivatev2_get_positionrisk($params = array()) {
        return $this->request('positionRisk', 'fapiPrivateV2', 'GET', $params);
    }
    public function eapipublic_get_ping($params = array()) {
        return $this->request('ping', 'eapiPublic', 'GET', $params);
    }
    public function eapipublic_get_time($params = array()) {
        return $this->request('time', 'eapiPublic', 'GET', $params);
    }
    public function eapipublic_get_exchangeinfo($params = array()) {
        return $this->request('exchangeInfo', 'eapiPublic', 'GET', $params);
    }
    public function eapipublic_get_index($params = array()) {
        return $this->request('index', 'eapiPublic', 'GET', $params);
    }
    public function eapipublic_get_ticker($params = array()) {
        return $this->request('ticker', 'eapiPublic', 'GET', $params);
    }
    public function eapipublic_get_mark($params = array()) {
        return $this->request('mark', 'eapiPublic', 'GET', $params);
    }
    public function eapipublic_get_depth($params = array()) {
        return $this->request('depth', 'eapiPublic', 'GET', $params);
    }
    public function eapipublic_get_klines($params = array()) {
        return $this->request('klines', 'eapiPublic', 'GET', $params);
    }
    public function eapipublic_get_trades($params = array()) {
        return $this->request('trades', 'eapiPublic', 'GET', $params);
    }
    public function eapipublic_get_historicaltrades($params = array()) {
        return $this->request('historicalTrades', 'eapiPublic', 'GET', $params);
    }
    public function eapipublic_get_exercisehistory($params = array()) {
        return $this->request('exerciseHistory', 'eapiPublic', 'GET', $params);
    }
    public function eapipublic_get_openinterest($params = array()) {
        return $this->request('openInterest', 'eapiPublic', 'GET', $params);
    }
    public function eapiprivate_get_account($params = array()) {
        return $this->request('account', 'eapiPrivate', 'GET', $params);
    }
    public function eapiprivate_get_position($params = array()) {
        return $this->request('position', 'eapiPrivate', 'GET', $params);
    }
    public function eapiprivate_get_openorders($params = array()) {
        return $this->request('openOrders', 'eapiPrivate', 'GET', $params);
    }
    public function eapiprivate_get_historyorders($params = array()) {
        return $this->request('historyOrders', 'eapiPrivate', 'GET', $params);
    }
    public function eapiprivate_get_usertrades($params = array()) {
        return $this->request('userTrades', 'eapiPrivate', 'GET', $params);
    }
    public function eapiprivate_get_exerciserecord($params = array()) {
        return $this->request('exerciseRecord', 'eapiPrivate', 'GET', $params);
    }
    public function eapiprivate_get_bill($params = array()) {
        return $this->request('bill', 'eapiPrivate', 'GET', $params);
    }
    public function eapiprivate_get_marginaccount($params = array()) {
        return $this->request('marginAccount', 'eapiPrivate', 'GET', $params);
    }
    public function eapiprivate_get_mmp($params = array()) {
        return $this->request('mmp', 'eapiPrivate', 'GET', $params);
    }
    public function eapiprivate_get_countdowncancelall($params = array()) {
        return $this->request('countdownCancelAll', 'eapiPrivate', 'GET', $params);
    }
    public function eapiprivate_get_order($params = array()) {
        return $this->request('order', 'eapiPrivate', 'GET', $params);
    }
    public function eapiprivate_post_order($params = array()) {
        return $this->request('order', 'eapiPrivate', 'POST', $params);
    }
    public function eapiprivate_post_batchorders($params = array()) {
        return $this->request('batchOrders', 'eapiPrivate', 'POST', $params);
    }
    public function eapiprivate_post_listenkey($params = array()) {
        return $this->request('listenKey', 'eapiPrivate', 'POST', $params);
    }
    public function eapiprivate_post_mmpset($params = array()) {
        return $this->request('mmpSet', 'eapiPrivate', 'POST', $params);
    }
    public function eapiprivate_post_mmpreset($params = array()) {
        return $this->request('mmpReset', 'eapiPrivate', 'POST', $params);
    }
    public function eapiprivate_post_countdowncancelall($params = array()) {
        return $this->request('countdownCancelAll', 'eapiPrivate', 'POST', $params);
    }
    public function eapiprivate_post_countdowncancelallheartbeat($params = array()) {
        return $this->request('countdownCancelAllHeartBeat', 'eapiPrivate', 'POST', $params);
    }
    public function eapiprivate_put_listenkey($params = array()) {
        return $this->request('listenKey', 'eapiPrivate', 'PUT', $params);
    }
    public function eapiprivate_delete_order($params = array()) {
        return $this->request('order', 'eapiPrivate', 'DELETE', $params);
    }
    public function eapiprivate_delete_batchorders($params = array()) {
        return $this->request('batchOrders', 'eapiPrivate', 'DELETE', $params);
    }
    public function eapiprivate_delete_allopenorders($params = array()) {
        return $this->request('allOpenOrders', 'eapiPrivate', 'DELETE', $params);
    }
    public function eapiprivate_delete_allopenordersbyunderlying($params = array()) {
        return $this->request('allOpenOrdersByUnderlying', 'eapiPrivate', 'DELETE', $params);
    }
    public function eapiprivate_delete_listenkey($params = array()) {
        return $this->request('listenKey', 'eapiPrivate', 'DELETE', $params);
    }
    public function public_get_ping($params = array()) {
        return $this->request('ping', 'public', 'GET', $params);
    }
    public function public_get_time($params = array()) {
        return $this->request('time', 'public', 'GET', $params);
    }
    public function public_get_depth($params = array()) {
        return $this->request('depth', 'public', 'GET', $params);
    }
    public function public_get_trades($params = array()) {
        return $this->request('trades', 'public', 'GET', $params);
    }
    public function public_get_aggtrades($params = array()) {
        return $this->request('aggTrades', 'public', 'GET', $params);
    }
    public function public_get_historicaltrades($params = array()) {
        return $this->request('historicalTrades', 'public', 'GET', $params);
    }
    public function public_get_klines($params = array()) {
        return $this->request('klines', 'public', 'GET', $params);
    }
    public function public_get_ticker_24hr($params = array()) {
        return $this->request('ticker/24hr', 'public', 'GET', $params);
    }
    public function public_get_ticker_price($params = array()) {
        return $this->request('ticker/price', 'public', 'GET', $params);
    }
    public function public_get_ticker_bookticker($params = array()) {
        return $this->request('ticker/bookTicker', 'public', 'GET', $params);
    }
    public function public_get_exchangeinfo($params = array()) {
        return $this->request('exchangeInfo', 'public', 'GET', $params);
    }
    public function public_put_userdatastream($params = array()) {
        return $this->request('userDataStream', 'public', 'PUT', $params);
    }
    public function public_post_userdatastream($params = array()) {
        return $this->request('userDataStream', 'public', 'POST', $params);
    }
    public function public_delete_userdatastream($params = array()) {
        return $this->request('userDataStream', 'public', 'DELETE', $params);
    }
    public function private_get_allorderlist($params = array()) {
        return $this->request('allOrderList', 'private', 'GET', $params);
    }
    public function private_get_openorderlist($params = array()) {
        return $this->request('openOrderList', 'private', 'GET', $params);
    }
    public function private_get_orderlist($params = array()) {
        return $this->request('orderList', 'private', 'GET', $params);
    }
    public function private_get_order($params = array()) {
        return $this->request('order', 'private', 'GET', $params);
    }
    public function private_get_openorders($params = array()) {
        return $this->request('openOrders', 'private', 'GET', $params);
    }
    public function private_get_allorders($params = array()) {
        return $this->request('allOrders', 'private', 'GET', $params);
    }
    public function private_get_account($params = array()) {
        return $this->request('account', 'private', 'GET', $params);
    }
    public function private_get_mytrades($params = array()) {
        return $this->request('myTrades', 'private', 'GET', $params);
    }
    public function private_get_ratelimit_order($params = array()) {
        return $this->request('rateLimit/order', 'private', 'GET', $params);
    }
    public function private_get_mypreventedmatches($params = array()) {
        return $this->request('myPreventedMatches', 'private', 'GET', $params);
    }
    public function private_post_order_oco($params = array()) {
        return $this->request('order/oco', 'private', 'POST', $params);
    }
    public function private_post_order($params = array()) {
        return $this->request('order', 'private', 'POST', $params);
    }
    public function private_post_order_cancelreplace($params = array()) {
        return $this->request('order/cancelReplace', 'private', 'POST', $params);
    }
    public function private_post_order_test($params = array()) {
        return $this->request('order/test', 'private', 'POST', $params);
    }
    public function private_delete_openorders($params = array()) {
        return $this->request('openOrders', 'private', 'DELETE', $params);
    }
    public function private_delete_orderlist($params = array()) {
        return $this->request('orderList', 'private', 'DELETE', $params);
    }
    public function private_delete_order($params = array()) {
        return $this->request('order', 'private', 'DELETE', $params);
    }
}