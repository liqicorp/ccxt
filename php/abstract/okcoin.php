<?php

namespace ccxt\abstract;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


abstract class okcoin extends \ccxt\Exchange {
    public function general_get_time($params = array()) {
        return $this->request('time', 'general', 'GET', $params);
    }
    public function account_get_wallet($params = array()) {
        return $this->request('wallet', 'account', 'GET', $params);
    }
    public function account_get_sub_account($params = array()) {
        return $this->request('sub-account', 'account', 'GET', $params);
    }
    public function account_get_asset_valuation($params = array()) {
        return $this->request('asset-valuation', 'account', 'GET', $params);
    }
    public function account_get_wallet_currency($params = array()) {
        return $this->request('wallet/{currency}', 'account', 'GET', $params);
    }
    public function account_get_withdrawal_history($params = array()) {
        return $this->request('withdrawal/history', 'account', 'GET', $params);
    }
    public function account_get_withdrawal_history_currency($params = array()) {
        return $this->request('withdrawal/history/{currency}', 'account', 'GET', $params);
    }
    public function account_get_ledger($params = array()) {
        return $this->request('ledger', 'account', 'GET', $params);
    }
    public function account_get_deposit_address($params = array()) {
        return $this->request('deposit/address', 'account', 'GET', $params);
    }
    public function account_get_deposit_history($params = array()) {
        return $this->request('deposit/history', 'account', 'GET', $params);
    }
    public function account_get_deposit_history_currency($params = array()) {
        return $this->request('deposit/history/{currency}', 'account', 'GET', $params);
    }
    public function account_get_currencies($params = array()) {
        return $this->request('currencies', 'account', 'GET', $params);
    }
    public function account_get_withdrawal_fee($params = array()) {
        return $this->request('withdrawal/fee', 'account', 'GET', $params);
    }
    public function account_get_deposit_lightning($params = array()) {
        return $this->request('deposit-lightning', 'account', 'GET', $params);
    }
    public function account_get_withdrawal_lightning($params = array()) {
        return $this->request('withdrawal-lightning', 'account', 'GET', $params);
    }
    public function account_get_fiat_deposit_detail($params = array()) {
        return $this->request('fiat/deposit/detail', 'account', 'GET', $params);
    }
    public function account_get_fiat_deposit_details($params = array()) {
        return $this->request('fiat/deposit/details', 'account', 'GET', $params);
    }
    public function account_get_fiat_withdraw_detail($params = array()) {
        return $this->request('fiat/withdraw/detail', 'account', 'GET', $params);
    }
    public function account_get_fiat_withdraw_details($params = array()) {
        return $this->request('fiat/withdraw/details', 'account', 'GET', $params);
    }
    public function account_get_fiat_channel($params = array()) {
        return $this->request('fiat/channel', 'account', 'GET', $params);
    }
    public function account_post_transfer($params = array()) {
        return $this->request('transfer', 'account', 'POST', $params);
    }
    public function account_post_withdrawal($params = array()) {
        return $this->request('withdrawal', 'account', 'POST', $params);
    }
    public function account_post_fiat_cancel_deposit($params = array()) {
        return $this->request('fiat/cancel_deposit', 'account', 'POST', $params);
    }
    public function account_post_fiat_deposit($params = array()) {
        return $this->request('fiat/deposit', 'account', 'POST', $params);
    }
    public function account_post_fiat_withdraw($params = array()) {
        return $this->request('fiat/withdraw', 'account', 'POST', $params);
    }
    public function account_post_fiat_cancel_withdrawal($params = array()) {
        return $this->request('fiat/cancel_withdrawal', 'account', 'POST', $params);
    }
    public function otc_get_rfq_instruments($params = array()) {
        return $this->request('rfq/instruments', 'otc', 'GET', $params);
    }
    public function otc_get_rfq_trade($params = array()) {
        return $this->request('rfq/trade', 'otc', 'GET', $params);
    }
    public function otc_get_rfq_history($params = array()) {
        return $this->request('rfq/history', 'otc', 'GET', $params);
    }
    public function otc_post_rfq_quote($params = array()) {
        return $this->request('rfq/quote', 'otc', 'POST', $params);
    }
    public function otc_post_rfq_trade($params = array()) {
        return $this->request('rfq/trade', 'otc', 'POST', $params);
    }
    public function users_get_subaccount_info($params = array()) {
        return $this->request('subaccount-info', 'users', 'GET', $params);
    }
    public function users_get_account_info($params = array()) {
        return $this->request('account-info', 'users', 'GET', $params);
    }
    public function users_get_subaccount_apikey($params = array()) {
        return $this->request('subaccount/apikey', 'users', 'GET', $params);
    }
    public function users_post_create_subaccount($params = array()) {
        return $this->request('create-subaccount', 'users', 'POST', $params);
    }
    public function users_post_delete_subaccount($params = array()) {
        return $this->request('delete-subaccount', 'users', 'POST', $params);
    }
    public function users_post_subaccount_apikey($params = array()) {
        return $this->request('subaccount/apikey', 'users', 'POST', $params);
    }
    public function users_post_subacount_delete_apikey($params = array()) {
        return $this->request('subacount/delete-apikey', 'users', 'POST', $params);
    }
    public function users_post_subacount_modify_apikey($params = array()) {
        return $this->request('subacount/modify-apikey', 'users', 'POST', $params);
    }
    public function earning_get_offers($params = array()) {
        return $this->request('offers', 'earning', 'GET', $params);
    }
    public function earning_get_orders($params = array()) {
        return $this->request('orders', 'earning', 'GET', $params);
    }
    public function earning_get_positions($params = array()) {
        return $this->request('positions', 'earning', 'GET', $params);
    }
    public function earning_post_purchase($params = array()) {
        return $this->request('purchase', 'earning', 'POST', $params);
    }
    public function earning_post_redeem($params = array()) {
        return $this->request('redeem', 'earning', 'POST', $params);
    }
    public function earning_post_cancel($params = array()) {
        return $this->request('cancel', 'earning', 'POST', $params);
    }
    public function spot_get_accounts($params = array()) {
        return $this->request('accounts', 'spot', 'GET', $params);
    }
    public function spot_get_accounts_currency($params = array()) {
        return $this->request('accounts/{currency}', 'spot', 'GET', $params);
    }
    public function spot_get_accounts_currency_ledger($params = array()) {
        return $this->request('accounts/{currency}/ledger', 'spot', 'GET', $params);
    }
    public function spot_get_orders($params = array()) {
        return $this->request('orders', 'spot', 'GET', $params);
    }
    public function spot_get_orders_pending($params = array()) {
        return $this->request('orders_pending', 'spot', 'GET', $params);
    }
    public function spot_get_orders_order_id($params = array()) {
        return $this->request('orders/{order_id}', 'spot', 'GET', $params);
    }
    public function spot_get_orders_client_oid($params = array()) {
        return $this->request('orders/{client_oid}', 'spot', 'GET', $params);
    }
    public function spot_get_trade_fee($params = array()) {
        return $this->request('trade_fee', 'spot', 'GET', $params);
    }
    public function spot_get_fills($params = array()) {
        return $this->request('fills', 'spot', 'GET', $params);
    }
    public function spot_get_algo($params = array()) {
        return $this->request('algo', 'spot', 'GET', $params);
    }
    public function spot_get_instruments($params = array()) {
        return $this->request('instruments', 'spot', 'GET', $params);
    }
    public function spot_get_instruments_instrument_id_book($params = array()) {
        return $this->request('instruments/{instrument_id}/book', 'spot', 'GET', $params);
    }
    public function spot_get_instruments_ticker($params = array()) {
        return $this->request('instruments/ticker', 'spot', 'GET', $params);
    }
    public function spot_get_instruments_instrument_id_ticker($params = array()) {
        return $this->request('instruments/{instrument_id}/ticker', 'spot', 'GET', $params);
    }
    public function spot_get_instruments_instrument_id_trades($params = array()) {
        return $this->request('instruments/{instrument_id}/trades', 'spot', 'GET', $params);
    }
    public function spot_get_instruments_instrument_id_candles($params = array()) {
        return $this->request('instruments/{instrument_id}/candles', 'spot', 'GET', $params);
    }
    public function spot_post_order_algo($params = array()) {
        return $this->request('order_algo', 'spot', 'POST', $params);
    }
    public function spot_post_orders($params = array()) {
        return $this->request('orders', 'spot', 'POST', $params);
    }
    public function spot_post_batch_orders($params = array()) {
        return $this->request('batch_orders', 'spot', 'POST', $params);
    }
    public function spot_post_cancel_orders_order_id($params = array()) {
        return $this->request('cancel_orders/{order_id}', 'spot', 'POST', $params);
    }
    public function spot_post_cancel_orders_client_oid($params = array()) {
        return $this->request('cancel_orders/{client_oid}', 'spot', 'POST', $params);
    }
    public function spot_post_cancel_batch_algos($params = array()) {
        return $this->request('cancel_batch_algos', 'spot', 'POST', $params);
    }
    public function spot_post_cancel_batch_orders($params = array()) {
        return $this->request('cancel_batch_orders', 'spot', 'POST', $params);
    }
    public function spot_post_amend_order_instrument_id($params = array()) {
        return $this->request('amend_order/{instrument_id}', 'spot', 'POST', $params);
    }
    public function spot_post_amend_batch_orders($params = array()) {
        return $this->request('amend_batch_orders', 'spot', 'POST', $params);
    }
    public function margin_get_accounts($params = array()) {
        return $this->request('accounts', 'margin', 'GET', $params);
    }
    public function margin_get_accounts_instrument_id($params = array()) {
        return $this->request('accounts/{instrument_id}', 'margin', 'GET', $params);
    }
    public function margin_get_accounts_instrument_id_ledger($params = array()) {
        return $this->request('accounts/{instrument_id}/ledger', 'margin', 'GET', $params);
    }
    public function margin_get_accounts_availability($params = array()) {
        return $this->request('accounts/availability', 'margin', 'GET', $params);
    }
    public function margin_get_accounts_instrument_id_availability($params = array()) {
        return $this->request('accounts/{instrument_id}/availability', 'margin', 'GET', $params);
    }
    public function margin_get_accounts_borrowed($params = array()) {
        return $this->request('accounts/borrowed', 'margin', 'GET', $params);
    }
    public function margin_get_accounts_instrument_id_borrowed($params = array()) {
        return $this->request('accounts/{instrument_id}/borrowed', 'margin', 'GET', $params);
    }
    public function margin_get_orders($params = array()) {
        return $this->request('orders', 'margin', 'GET', $params);
    }
    public function margin_get_accounts_instrument_id_leverage($params = array()) {
        return $this->request('accounts/{instrument_id}/leverage', 'margin', 'GET', $params);
    }
    public function margin_get_orders_order_id($params = array()) {
        return $this->request('orders/{order_id}', 'margin', 'GET', $params);
    }
    public function margin_get_orders_client_oid($params = array()) {
        return $this->request('orders/{client_oid}', 'margin', 'GET', $params);
    }
    public function margin_get_orders_pending($params = array()) {
        return $this->request('orders_pending', 'margin', 'GET', $params);
    }
    public function margin_get_fills($params = array()) {
        return $this->request('fills', 'margin', 'GET', $params);
    }
    public function margin_get_instruments_instrument_id_mark_price($params = array()) {
        return $this->request('instruments/{instrument_id}/mark_price', 'margin', 'GET', $params);
    }
    public function margin_post_accounts_borrow($params = array()) {
        return $this->request('accounts/borrow', 'margin', 'POST', $params);
    }
    public function margin_post_accounts_repayment($params = array()) {
        return $this->request('accounts/repayment', 'margin', 'POST', $params);
    }
    public function margin_post_orders($params = array()) {
        return $this->request('orders', 'margin', 'POST', $params);
    }
    public function margin_post_batch_orders($params = array()) {
        return $this->request('batch_orders', 'margin', 'POST', $params);
    }
    public function margin_post_cancel_orders($params = array()) {
        return $this->request('cancel_orders', 'margin', 'POST', $params);
    }
    public function margin_post_cancel_orders_order_id($params = array()) {
        return $this->request('cancel_orders/{order_id}', 'margin', 'POST', $params);
    }
    public function margin_post_cancel_orders_client_oid($params = array()) {
        return $this->request('cancel_orders/{client_oid}', 'margin', 'POST', $params);
    }
    public function margin_post_cancel_batch_orders($params = array()) {
        return $this->request('cancel_batch_orders', 'margin', 'POST', $params);
    }
    public function margin_post_amend_order_instrument_id($params = array()) {
        return $this->request('amend_order/{instrument_id}', 'margin', 'POST', $params);
    }
    public function margin_post_amend_batch_orders($params = array()) {
        return $this->request('amend_batch_orders', 'margin', 'POST', $params);
    }
    public function margin_post_accounts_instrument_id_leverage($params = array()) {
        return $this->request('accounts/{instrument_id}/leverage', 'margin', 'POST', $params);
    }
    public function system_get_status($params = array()) {
        return $this->request('status', 'system', 'GET', $params);
    }
    public function market_get_oracle($params = array()) {
        return $this->request('oracle', 'market', 'GET', $params);
    }
    public function futures_get_position($params = array()) {
        return $this->request('position', 'futures', 'GET', $params);
    }
    public function futures_get_instrument_id_position($params = array()) {
        return $this->request('{instrument_id}/position', 'futures', 'GET', $params);
    }
    public function futures_get_accounts($params = array()) {
        return $this->request('accounts', 'futures', 'GET', $params);
    }
    public function futures_get_accounts_underlying($params = array()) {
        return $this->request('accounts/{underlying}', 'futures', 'GET', $params);
    }
    public function futures_get_accounts_underlying_leverage($params = array()) {
        return $this->request('accounts/{underlying}/leverage', 'futures', 'GET', $params);
    }
    public function futures_get_accounts_underlying_ledger($params = array()) {
        return $this->request('accounts/{underlying}/ledger', 'futures', 'GET', $params);
    }
    public function futures_get_order_algo_instrument_id($params = array()) {
        return $this->request('order_algo/{instrument_id}', 'futures', 'GET', $params);
    }
    public function futures_get_orders_instrument_id($params = array()) {
        return $this->request('orders/{instrument_id}', 'futures', 'GET', $params);
    }
    public function futures_get_orders_instrument_id_order_id($params = array()) {
        return $this->request('orders/{instrument_id}/{order_id}', 'futures', 'GET', $params);
    }
    public function futures_get_orders_instrument_id_client_oid($params = array()) {
        return $this->request('orders/{instrument_id}/{client_oid}', 'futures', 'GET', $params);
    }
    public function futures_get_fills($params = array()) {
        return $this->request('fills', 'futures', 'GET', $params);
    }
    public function futures_get_trade_fee($params = array()) {
        return $this->request('trade_fee', 'futures', 'GET', $params);
    }
    public function futures_get_accounts_instrument_id_holds($params = array()) {
        return $this->request('accounts/{instrument_id}/holds', 'futures', 'GET', $params);
    }
    public function futures_get_instruments($params = array()) {
        return $this->request('instruments', 'futures', 'GET', $params);
    }
    public function futures_get_instruments_instrument_id_book($params = array()) {
        return $this->request('instruments/{instrument_id}/book', 'futures', 'GET', $params);
    }
    public function futures_get_instruments_ticker($params = array()) {
        return $this->request('instruments/ticker', 'futures', 'GET', $params);
    }
    public function futures_get_instruments_instrument_id_ticker($params = array()) {
        return $this->request('instruments/{instrument_id}/ticker', 'futures', 'GET', $params);
    }
    public function futures_get_instruments_instrument_id_trades($params = array()) {
        return $this->request('instruments/{instrument_id}/trades', 'futures', 'GET', $params);
    }
    public function futures_get_instruments_instrument_id_candles($params = array()) {
        return $this->request('instruments/{instrument_id}/candles', 'futures', 'GET', $params);
    }
    public function futures_get_instruments_instrument_id_history_candles($params = array()) {
        return $this->request('instruments/{instrument_id}/history/candles', 'futures', 'GET', $params);
    }
    public function futures_get_instruments_instrument_id_index($params = array()) {
        return $this->request('instruments/{instrument_id}/index', 'futures', 'GET', $params);
    }
    public function futures_get_rate($params = array()) {
        return $this->request('rate', 'futures', 'GET', $params);
    }
    public function futures_get_instruments_instrument_id_estimated_price($params = array()) {
        return $this->request('instruments/{instrument_id}/estimated_price', 'futures', 'GET', $params);
    }
    public function futures_get_instruments_instrument_id_open_interest($params = array()) {
        return $this->request('instruments/{instrument_id}/open_interest', 'futures', 'GET', $params);
    }
    public function futures_get_instruments_instrument_id_price_limit($params = array()) {
        return $this->request('instruments/{instrument_id}/price_limit', 'futures', 'GET', $params);
    }
    public function futures_get_instruments_instrument_id_mark_price($params = array()) {
        return $this->request('instruments/{instrument_id}/mark_price', 'futures', 'GET', $params);
    }
    public function futures_get_instruments_instrument_id_liquidation($params = array()) {
        return $this->request('instruments/{instrument_id}/liquidation', 'futures', 'GET', $params);
    }
    public function futures_post_accounts_underlying_leverage($params = array()) {
        return $this->request('accounts/{underlying}/leverage', 'futures', 'POST', $params);
    }
    public function futures_post_order($params = array()) {
        return $this->request('order', 'futures', 'POST', $params);
    }
    public function futures_post_amend_order_instrument_id($params = array()) {
        return $this->request('amend_order/{instrument_id}', 'futures', 'POST', $params);
    }
    public function futures_post_orders($params = array()) {
        return $this->request('orders', 'futures', 'POST', $params);
    }
    public function futures_post_cancel_order_instrument_id_order_id($params = array()) {
        return $this->request('cancel_order/{instrument_id}/{order_id}', 'futures', 'POST', $params);
    }
    public function futures_post_cancel_order_instrument_id_client_oid($params = array()) {
        return $this->request('cancel_order/{instrument_id}/{client_oid}', 'futures', 'POST', $params);
    }
    public function futures_post_cancel_batch_orders_instrument_id($params = array()) {
        return $this->request('cancel_batch_orders/{instrument_id}', 'futures', 'POST', $params);
    }
    public function futures_post_accounts_margin_mode($params = array()) {
        return $this->request('accounts/margin_mode', 'futures', 'POST', $params);
    }
    public function futures_post_close_position($params = array()) {
        return $this->request('close_position', 'futures', 'POST', $params);
    }
    public function futures_post_cancel_all($params = array()) {
        return $this->request('cancel_all', 'futures', 'POST', $params);
    }
    public function futures_post_order_algo($params = array()) {
        return $this->request('order_algo', 'futures', 'POST', $params);
    }
    public function futures_post_cancel_algos($params = array()) {
        return $this->request('cancel_algos', 'futures', 'POST', $params);
    }
    public function swap_get_position($params = array()) {
        return $this->request('position', 'swap', 'GET', $params);
    }
    public function swap_get_instrument_id_position($params = array()) {
        return $this->request('{instrument_id}/position', 'swap', 'GET', $params);
    }
    public function swap_get_accounts($params = array()) {
        return $this->request('accounts', 'swap', 'GET', $params);
    }
    public function swap_get_instrument_id_accounts($params = array()) {
        return $this->request('{instrument_id}/accounts', 'swap', 'GET', $params);
    }
    public function swap_get_accounts_instrument_id_settings($params = array()) {
        return $this->request('accounts/{instrument_id}/settings', 'swap', 'GET', $params);
    }
    public function swap_get_accounts_instrument_id_ledger($params = array()) {
        return $this->request('accounts/{instrument_id}/ledger', 'swap', 'GET', $params);
    }
    public function swap_get_orders_instrument_id($params = array()) {
        return $this->request('orders/{instrument_id}', 'swap', 'GET', $params);
    }
    public function swap_get_orders_instrument_id_order_id($params = array()) {
        return $this->request('orders/{instrument_id}/{order_id}', 'swap', 'GET', $params);
    }
    public function swap_get_orders_instrument_id_client_oid($params = array()) {
        return $this->request('orders/{instrument_id}/{client_oid}', 'swap', 'GET', $params);
    }
    public function swap_get_fills($params = array()) {
        return $this->request('fills', 'swap', 'GET', $params);
    }
    public function swap_get_accounts_instrument_id_holds($params = array()) {
        return $this->request('accounts/{instrument_id}/holds', 'swap', 'GET', $params);
    }
    public function swap_get_trade_fee($params = array()) {
        return $this->request('trade_fee', 'swap', 'GET', $params);
    }
    public function swap_get_order_algo_instrument_id($params = array()) {
        return $this->request('order_algo/{instrument_id}', 'swap', 'GET', $params);
    }
    public function swap_get_instruments($params = array()) {
        return $this->request('instruments', 'swap', 'GET', $params);
    }
    public function swap_get_instruments_instrument_id_depth($params = array()) {
        return $this->request('instruments/{instrument_id}/depth', 'swap', 'GET', $params);
    }
    public function swap_get_instruments_ticker($params = array()) {
        return $this->request('instruments/ticker', 'swap', 'GET', $params);
    }
    public function swap_get_instruments_instrument_id_ticker($params = array()) {
        return $this->request('instruments/{instrument_id}/ticker', 'swap', 'GET', $params);
    }
    public function swap_get_instruments_instrument_id_trades($params = array()) {
        return $this->request('instruments/{instrument_id}/trades', 'swap', 'GET', $params);
    }
    public function swap_get_instruments_instrument_id_candles($params = array()) {
        return $this->request('instruments/{instrument_id}/candles', 'swap', 'GET', $params);
    }
    public function swap_get_instruments_instrument_id_history_candles($params = array()) {
        return $this->request('instruments/{instrument_id}/history/candles', 'swap', 'GET', $params);
    }
    public function swap_get_instruments_instrument_id_index($params = array()) {
        return $this->request('instruments/{instrument_id}/index', 'swap', 'GET', $params);
    }
    public function swap_get_rate($params = array()) {
        return $this->request('rate', 'swap', 'GET', $params);
    }
    public function swap_get_instruments_instrument_id_open_interest($params = array()) {
        return $this->request('instruments/{instrument_id}/open_interest', 'swap', 'GET', $params);
    }
    public function swap_get_instruments_instrument_id_price_limit($params = array()) {
        return $this->request('instruments/{instrument_id}/price_limit', 'swap', 'GET', $params);
    }
    public function swap_get_instruments_instrument_id_liquidation($params = array()) {
        return $this->request('instruments/{instrument_id}/liquidation', 'swap', 'GET', $params);
    }
    public function swap_get_instruments_instrument_id_funding_time($params = array()) {
        return $this->request('instruments/{instrument_id}/funding_time', 'swap', 'GET', $params);
    }
    public function swap_get_instruments_instrument_id_mark_price($params = array()) {
        return $this->request('instruments/{instrument_id}/mark_price', 'swap', 'GET', $params);
    }
    public function swap_get_instruments_instrument_id_historical_funding_rate($params = array()) {
        return $this->request('instruments/{instrument_id}/historical_funding_rate', 'swap', 'GET', $params);
    }
    public function swap_post_accounts_instrument_id_leverage($params = array()) {
        return $this->request('accounts/{instrument_id}/leverage', 'swap', 'POST', $params);
    }
    public function swap_post_order($params = array()) {
        return $this->request('order', 'swap', 'POST', $params);
    }
    public function swap_post_amend_order_instrument_id($params = array()) {
        return $this->request('amend_order/{instrument_id}', 'swap', 'POST', $params);
    }
    public function swap_post_orders($params = array()) {
        return $this->request('orders', 'swap', 'POST', $params);
    }
    public function swap_post_cancel_order_instrument_id_order_id($params = array()) {
        return $this->request('cancel_order/{instrument_id}/{order_id}', 'swap', 'POST', $params);
    }
    public function swap_post_cancel_order_instrument_id_client_oid($params = array()) {
        return $this->request('cancel_order/{instrument_id}/{client_oid}', 'swap', 'POST', $params);
    }
    public function swap_post_cancel_batch_orders_instrument_id($params = array()) {
        return $this->request('cancel_batch_orders/{instrument_id}', 'swap', 'POST', $params);
    }
    public function swap_post_order_algo($params = array()) {
        return $this->request('order_algo', 'swap', 'POST', $params);
    }
    public function swap_post_cancel_algos($params = array()) {
        return $this->request('cancel_algos', 'swap', 'POST', $params);
    }
    public function swap_post_close_position($params = array()) {
        return $this->request('close_position', 'swap', 'POST', $params);
    }
    public function swap_post_cancel_all($params = array()) {
        return $this->request('cancel_all', 'swap', 'POST', $params);
    }
    public function option_get_accounts($params = array()) {
        return $this->request('accounts', 'option', 'GET', $params);
    }
    public function option_get_position($params = array()) {
        return $this->request('position', 'option', 'GET', $params);
    }
    public function option_get_underlying_position($params = array()) {
        return $this->request('{underlying}/position', 'option', 'GET', $params);
    }
    public function option_get_accounts_underlying($params = array()) {
        return $this->request('accounts/{underlying}', 'option', 'GET', $params);
    }
    public function option_get_orders_underlying($params = array()) {
        return $this->request('orders/{underlying}', 'option', 'GET', $params);
    }
    public function option_get_fills_underlying($params = array()) {
        return $this->request('fills/{underlying}', 'option', 'GET', $params);
    }
    public function option_get_accounts_underlying_ledger($params = array()) {
        return $this->request('accounts/{underlying}/ledger', 'option', 'GET', $params);
    }
    public function option_get_trade_fee($params = array()) {
        return $this->request('trade_fee', 'option', 'GET', $params);
    }
    public function option_get_orders_underlying_order_id($params = array()) {
        return $this->request('orders/{underlying}/{order_id}', 'option', 'GET', $params);
    }
    public function option_get_orders_underlying_client_oid($params = array()) {
        return $this->request('orders/{underlying}/{client_oid}', 'option', 'GET', $params);
    }
    public function option_get_underlying($params = array()) {
        return $this->request('underlying', 'option', 'GET', $params);
    }
    public function option_get_instruments_underlying($params = array()) {
        return $this->request('instruments/{underlying}', 'option', 'GET', $params);
    }
    public function option_get_instruments_underlying_summary($params = array()) {
        return $this->request('instruments/{underlying}/summary', 'option', 'GET', $params);
    }
    public function option_get_instruments_underlying_summary_instrument_id($params = array()) {
        return $this->request('instruments/{underlying}/summary/{instrument_id}', 'option', 'GET', $params);
    }
    public function option_get_instruments_instrument_id_book($params = array()) {
        return $this->request('instruments/{instrument_id}/book', 'option', 'GET', $params);
    }
    public function option_get_instruments_instrument_id_trades($params = array()) {
        return $this->request('instruments/{instrument_id}/trades', 'option', 'GET', $params);
    }
    public function option_get_instruments_instrument_id_ticker($params = array()) {
        return $this->request('instruments/{instrument_id}/ticker', 'option', 'GET', $params);
    }
    public function option_get_instruments_instrument_id_candles($params = array()) {
        return $this->request('instruments/{instrument_id}/candles', 'option', 'GET', $params);
    }
    public function option_post_order($params = array()) {
        return $this->request('order', 'option', 'POST', $params);
    }
    public function option_post_orders($params = array()) {
        return $this->request('orders', 'option', 'POST', $params);
    }
    public function option_post_cancel_order_underlying_order_id($params = array()) {
        return $this->request('cancel_order/{underlying}/{order_id}', 'option', 'POST', $params);
    }
    public function option_post_cancel_order_underlying_client_oid($params = array()) {
        return $this->request('cancel_order/{underlying}/{client_oid}', 'option', 'POST', $params);
    }
    public function option_post_cancel_batch_orders_underlying($params = array()) {
        return $this->request('cancel_batch_orders/{underlying}', 'option', 'POST', $params);
    }
    public function option_post_amend_order_underlying($params = array()) {
        return $this->request('amend_order/{underlying}', 'option', 'POST', $params);
    }
    public function option_post_amend_batch_orders_underlying($params = array()) {
        return $this->request('amend_batch_orders/{underlying}', 'option', 'POST', $params);
    }
    public function information_get_currency_long_short_ratio($params = array()) {
        return $this->request('{currency}/long_short_ratio', 'information', 'GET', $params);
    }
    public function information_get_currency_volume($params = array()) {
        return $this->request('{currency}/volume', 'information', 'GET', $params);
    }
    public function information_get_currency_taker($params = array()) {
        return $this->request('{currency}/taker', 'information', 'GET', $params);
    }
    public function information_get_currency_sentiment($params = array()) {
        return $this->request('{currency}/sentiment', 'information', 'GET', $params);
    }
    public function information_get_currency_margin($params = array()) {
        return $this->request('{currency}/margin', 'information', 'GET', $params);
    }
    public function index_get_instrument_id_constituents($params = array()) {
        return $this->request('{instrument_id}/constituents', 'index', 'GET', $params);
    }
}